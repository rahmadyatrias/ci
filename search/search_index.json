{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Computational Intelligence Welcome to the world of computational intelligence (CI), which takes inspiration from nature to develop intelligent computer-based systems. Broadly, the field of CI encompasses three main branches of research and application: (1) neural networks, which model aspects of how brains function, (2) fuzzy systems, which model aspects of how people describe the world around them, and (3) evolutionary computation, which models aspects of variation and natural selection in the biosphere. These three approaches are often synergistic, working together to supplement each other and provide superior solutions to vexing problems. Overview Computational intelligence techniques demonstrate superior learning and generalization abilities on handling these complex and ill-defined problems. By using appropriate computational intelligence techniques, some essential characteristics and important information can be extracted to deal with the problems. It has been shown that various computational intelligence techniques have been successfully applied to a wide range of applications from pattern recognition and system modeling to intelligent control problems and biomedical applications.","title":"Computational Intelligence"},{"location":"#computational-intelligence","text":"Welcome to the world of computational intelligence (CI), which takes inspiration from nature to develop intelligent computer-based systems. Broadly, the field of CI encompasses three main branches of research and application: (1) neural networks, which model aspects of how brains function, (2) fuzzy systems, which model aspects of how people describe the world around them, and (3) evolutionary computation, which models aspects of variation and natural selection in the biosphere. These three approaches are often synergistic, working together to supplement each other and provide superior solutions to vexing problems.","title":"Computational Intelligence"},{"location":"#overview","text":"Computational intelligence techniques demonstrate superior learning and generalization abilities on handling these complex and ill-defined problems. By using appropriate computational intelligence techniques, some essential characteristics and important information can be extracted to deal with the problems. It has been shown that various computational intelligence techniques have been successfully applied to a wide range of applications from pattern recognition and system modeling to intelligent control problems and biomedical applications.","title":"Overview"},{"location":"about/book/","text":"References Computational intelligence techniques are fast-growing and promising research topics that have drawn a great deal of attention from researchers for many years. Books See the following Ebook1 . Fundamentals Of Computational Intelligence Neural Networks, Fuzzy Systems, and Evolutionary Computation. James M. Keller, Derong Liu, David B. Fogel. Canada: John Wiley & Sons, Inc., 2016 Ebook2 . Computational Intelligence - and Introduction. Andries P. Engeelbrecht. UK: John Willey & Sons, Ltd. 2002.","title":"EBook"},{"location":"about/book/#references","text":"Computational intelligence techniques are fast-growing and promising research topics that have drawn a great deal of attention from researchers for many years.","title":"References"},{"location":"about/book/#books","text":"See the following Ebook1 . Fundamentals Of Computational Intelligence Neural Networks, Fuzzy Systems, and Evolutionary Computation. James M. Keller, Derong Liu, David B. Fogel. Canada: John Wiley & Sons, Inc., 2016 Ebook2 . Computational Intelligence - and Introduction. Andries P. Engeelbrecht. UK: John Willey & Sons, Ltd. 2002.","title":"Books"},{"location":"about/contributing/","text":"Contributing to MkDocs An introduction to contributing to the MkDocs project. The MkDocs project welcomes, and depends, on contributions from developers and users in the open source community. Contributions can be made in a number of ways, a few examples are: Code patches via pull requests Documentation improvements Bug reports and patch reviews Code of Conduct Everyone interacting in the MkDocs project's codebases, issue trackers, chat rooms, and mailing lists is expected to follow the PyPA Code of Conduct . Reporting an Issue Please include as much detail as you can. Let us know your platform and MkDocs version. If the problem is visual (for example a theme or design issue) please add a screenshot and if you get an error please include the full error and traceback. Testing the Development Version If you want to just install and try out the latest development version of MkDocs you can do so with the following command. This can be useful if you want to provide feedback for a new feature or want to confirm if a bug you have encountered is fixed in the git master. It is strongly recommended that you do this within a virtualenv . pip install https://github.com/mkdocs/mkdocs/archive/master.tar.gz Installing for Development First you'll need to fork and clone the repository. Once you have a local copy, run the following command. It is strongly recommended that you do this within a virtualenv . pip install --editable . This will install MkDocs in development mode which binds the mkdocs command to the git repository. Running the tests To run the tests, it is recommended that you use Tox . This just needs to be pip installed and then the test suite can be ran for MkDocs but running the command tox in the root of your MkDocs repository. It will attempt to run the tests against all of the Python versions we support. So don't be concerned if you are missing some and they fail. The rest will be verified by Travis when you submit a pull request. Submitting Pull Requests Once you are happy with your changes or you are ready for some feedback, push it to your fork and send a pull request. For a change to be accepted it will most likely need to have tests and documentation if it is a new feature.","title":"Contributing to MkDocs"},{"location":"about/contributing/#contributing-to-mkdocs","text":"An introduction to contributing to the MkDocs project. The MkDocs project welcomes, and depends, on contributions from developers and users in the open source community. Contributions can be made in a number of ways, a few examples are: Code patches via pull requests Documentation improvements Bug reports and patch reviews","title":"Contributing to MkDocs"},{"location":"about/contributing/#code-of-conduct","text":"Everyone interacting in the MkDocs project's codebases, issue trackers, chat rooms, and mailing lists is expected to follow the PyPA Code of Conduct .","title":"Code of Conduct"},{"location":"about/contributing/#reporting-an-issue","text":"Please include as much detail as you can. Let us know your platform and MkDocs version. If the problem is visual (for example a theme or design issue) please add a screenshot and if you get an error please include the full error and traceback.","title":"Reporting an Issue"},{"location":"about/contributing/#testing-the-development-version","text":"If you want to just install and try out the latest development version of MkDocs you can do so with the following command. This can be useful if you want to provide feedback for a new feature or want to confirm if a bug you have encountered is fixed in the git master. It is strongly recommended that you do this within a virtualenv . pip install https://github.com/mkdocs/mkdocs/archive/master.tar.gz","title":"Testing the Development Version"},{"location":"about/contributing/#installing-for-development","text":"First you'll need to fork and clone the repository. Once you have a local copy, run the following command. It is strongly recommended that you do this within a virtualenv . pip install --editable . This will install MkDocs in development mode which binds the mkdocs command to the git repository.","title":"Installing for Development"},{"location":"about/contributing/#running-the-tests","text":"To run the tests, it is recommended that you use Tox . This just needs to be pip installed and then the test suite can be ran for MkDocs but running the command tox in the root of your MkDocs repository. It will attempt to run the tests against all of the Python versions we support. So don't be concerned if you are missing some and they fail. The rest will be verified by Travis when you submit a pull request.","title":"Running the tests"},{"location":"about/contributing/#submitting-pull-requests","text":"Once you are happy with your changes or you are ready for some feedback, push it to your fork and send a pull request. For a change to be accepted it will most likely need to have tests and documentation if it is a new feature.","title":"Submitting Pull Requests"},{"location":"about/license/","text":"License The legal stuff. Included projects Themes used under license from the ReadTheDocs projects. ReadTheDocs theme - View license . Many thanks to the authors and contributors of those wonderful projects. MkDocs License (BSD) Copyright \u00a9 2014, Tom Christie. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"about/license/#license","text":"The legal stuff.","title":"License"},{"location":"about/license/#included-projects","text":"Themes used under license from the ReadTheDocs projects. ReadTheDocs theme - View license . Many thanks to the authors and contributors of those wonderful projects.","title":"Included projects"},{"location":"about/license/#mkdocs-license-bsd","text":"Copyright \u00a9 2014, Tom Christie. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"MkDocs License (BSD)"},{"location":"user-guide/configuration/","text":"Configuration Guide to all available configuration settings. Introduction Project settings are always configured by using a YAML configuration file in the project directory named mkdocs.yml . As a minimum this configuration file must contain the site_name setting. All other settings are optional. Project information site_name This is a required setting , and should be a string that is used as the main title for the project documentation. For example: site_name: Marshmallow Generator When rendering the theme this setting will be passed as the site_name context variable. site_url Set the canonical URL of the site. This will add a link tag with the canonical URL to the generated HTML header. default : null repo_url When set, provides a link to your repository (GitHub, Bitbucket, GitLab, ...) on each page. repo_url: https://github.com/example/repository/ default : null repo_name When set, provides the name for the link to your repository on each page. default : 'GitHub' , 'Bitbucket' or 'GitLab' if the repo_url matches those domains, otherwise the hostname from the repo_url . edit_uri Path from the base repo_url to the docs directory when directly viewing a page, accounting for specifics of the repository host (e.g. GitHub, Bitbucket, etc), the branch, and the docs directory itself. MkDocs concatenates repo_url and edit_uri , and appends the input path of the page. When set, and if your theme supports it, provides a link directly to the page in your source repository. This makes it easier to find and edit the source for the page. If repo_url is not set, this option is ignored. On some themes, setting this option may cause an edit link to be used in place of a repository link. Other themes may show both links. The edit_uri supports query ('?') and fragment ('#') characters. For repository hosts that use a query or a fragment to access the files, the edit_uri might be set as follows. (Note the ? and # in the URI...) # Query string example edit_uri: '?query=root/path/docs/' # Hash fragment example edit_uri: '#root/path/docs/' For other repository hosts, simply specify the relative path to the docs directory. # Query string example edit_uri: root/path/docs/ !!! note On a few known hosts (specifically GitHub, Bitbucket and GitLab), the edit_uri is derived from the 'repo_url' and does not need to be set manually. Simply defining a repo_url will automatically populate the edit_uri configs setting. For example, for a GitHub- or GitLab-hosted repository, the `edit_uri` would be automatically set as `edit/master/docs/` (Note the `edit` path and `master` branch). For a Bitbucket-hosted repository, the equivalent `edit_uri` would be automatically set as `src/default/docs/` (note the `src` path and `default` branch). To use a different URI than the default (for example a different branch), simply set the `edit_uri` to your desired string. If you do not want any \"edit URL link\" displayed on your pages, then set `edit_uri` to an empty string to disable the automatic setting. !!! warning On GitHub and GitLab, the default \"edit\" path ( edit/master/docs/ ) opens the page in the online editor. This functionality requires that the user have and be logged in to a GitHub/GitLab account. Otherwise, the user will be redirected to a login/signup page. Alternatively, use the \"blob\" path ( blob/master/docs/ ) to open a read-only view, which supports anonymous access. default : edit/master/docs/ for GitHub and GitLab repos or src/default/docs/ for a Bitbucket repo, if repo_url matches those domains, otherwise null site_description Set the site description. This will add a meta tag to the generated HTML header. default : null site_author Set the name of the author. This will add a meta tag to the generated HTML header. default : null copyright Set the copyright information to be included in the documentation by the theme. default : null google_analytics Set the Google analytics tracking configuration. google_analytics: ['UA-36723568-3', 'mkdocs.org'] default : null remote_branch Set the remote branch to commit to when using gh-deploy to deploy to Github Pages. This option can be overridden by a command line option in gh-deploy . default : gh-pages remote_name Set the remote name to push to when using gh-deploy to deploy to Github Pages. This option can be overridden by a command line option in gh-deploy . default : origin Documentation layout nav This setting is used to determine the format and layout of the global navigation for the site. For example, the following would create \"Introduction\", \"User Guide\" and \"About\" navigation items. nav: - 'Introduction': 'index.md' - 'User Guide': 'user-guide.md' - 'About': 'about.md' All paths must be relative to the mkdocs.yml configuration file. See the section on configuring pages and navigation for a more detailed breakdown, including how to create sub-sections. Navigation items may also include links to external sites. While titles are optional for internal links, they are required for external links. An external link may be a full URL or a relative URL. Any path which is not found in the files is assumed to be an external link. nav: - Home: index.md - User Guide: user-guide.md - Bug Tracker: https://example.com/ In the above example, the first two items point to local files while the third points to an external site. However, sometimes the MkDocs site is hosted in a subdirectory of a project's site and you may want to link to other parts of the same site without including the full domain. In that case, you may use and appropriate relative URL. site_url: https://example.com/foo/ nav: - Home: ../ - User Guide: user-guide.md - Bug Tracker: /bugs/ In the above example, two different styles of external links are used. First note that the site_url indicates that the MkDocs site is hosted in the /foo/ subdirectory of the domain. Therefore, the Home navigation item is a relative link which steps up one level to the server root and effectively points to https://example.com/ . The Bug Tracker item uses an absolute path from the server root and effectively points to https://example.com/bugs/ . Of course, the User Guide points to a local MkDocs page. default : By default nav will contain an alphanumerically sorted, nested list of all the Markdown files found within the docs_dir and its sub-directories. If none are found it will be [] (an empty list). Build directories theme Sets the theme and theme specific configuration of your documentation site. May be either a string or a set of key/value pairs. If a string, it must be the string name of a known installed theme. For a list of available themes visit styling your docs . An example set of key/value pairs might look something like this: theme: name: mkdocs custom_dir: my_theme_customizations/ static_templates: - sitemap.html include_sidebar: false If a set of key/value pairs, the following nested keys can be defined: !!! block \"\" #### name: The string name of a known installed theme. For a list of available themes visit [styling your docs]. #### custom_dir: A directory containing a custom theme. This can either be a relative directory, in which case it is resolved relative to the directory containing your configuration file, or it can be an absolute directory path from the root of your local file system. See [styling your docs][theme_dir] for details if you would like to tweak an existing theme. See [custom themes] if you would like to build your own theme from the ground up. #### static_templates: A list of templates to render as static pages. The templates must be located in either the theme's template directory or in the `custom_dir` defined in the theme configuration. #### (theme specific keywords) Any additional keywords supported by the theme can also be defined. See the documentation for the theme you are using for details. default : 'mkdocs' docs_dir The directory containing the documentation source markdown files. This can either be a relative directory, in which case it is resolved relative to the directory containing your configuration file, or it can be an absolute directory path from the root of your local file system. default : 'docs' site_dir The directory where the output HTML and other files are created. This can either be a relative directory, in which case it is resolved relative to the directory containing your configuration file, or it can be an absolute directory path from the root of your local file system. default : 'site' !!! note \"Note:\" If you are using source code control you will normally want to ensure that your build output files are not committed into the repository, and only keep the source files under version control. For example, if using git you might add the following line to your .gitignore file: site/ If you're using another source code control tool, you'll want to check its documentation on how to ignore specific directories. extra_css Set a list of CSS files in your docs_dir to be included by the theme. For example, the following example will include the extra.css file within the css subdirectory in your docs_dir . extra_css: - css/extra.css - css/second_extra.css default : [] (an empty list). extra_javascript Set a list of JavaScript files in your docs_dir to be included by the theme. See the example in extra_css for usage. default : [] (an empty list). extra_templates Set a list of templates in your docs_dir to be built by MkDocs. To see more about writing templates for MkDocs read the documentation about custom themes and specifically the section about the variables that are available to templates. See the example in extra_css for usage. default : [] (an empty list). extra A set of key value pairs, where the values can be any valid YAML construct, that will be passed to the template. This allows for great flexibility when creating custom themes. For example, if you are using a theme that supports displaying the project version, you can pass it to the theme like this: extra: version: 1.0 default : By default extra will be an empty key value mapping. Preview controls use_directory_urls This setting controls the style used for linking to pages within the documentation. The following table demonstrates how the URLs used on the site differ when setting use_directory_urls to true or false . Source file use_directory_urls: true use_directory_urls: false index.md / /index.html api-guide.md /api-guide/ /api-guide.html about/license.md /about/license/ /about/license.html The default style of use_directory_urls: true creates more user friendly URLs, and is usually what you'll want to use. The alternate style can occasionally be useful if you want your documentation to remain properly linked when opening pages directly from the file system, because it creates links that point directly to the target file rather than the target directory . default : true strict Determines how warnings are handled. Set to true to halt processing when a warning is raised. Set to false to print a warning and continue processing. default : false dev_addr Determines the address used when running mkdocs serve . Must be of the format IP:PORT . Allows a custom default to be set without the need to pass it through the --dev_addr option every time the mkdocs serve command is called. default : '127.0.0.1:8000' Formatting options markdown_extensions MkDocs uses the Python Markdown library to translate Markdown files into HTML. Python Markdown supports a variety of extensions that customize how pages are formatted. This setting lets you enable a list of extensions beyond the ones that MkDocs uses by default ( meta , toc , tables , and fenced_code ). For example, to enable the SmartyPants typography extension , use: markdown_extensions: - smarty Some extensions provide configuration options of their own. If you would like to set any configuration options, then you can nest a key/value mapping ( option_name: option value ) of any options that a given extension supports. See the documentation for the extension you are using to determine what options they support. For example, to enable permalinks in the (included) toc extension, use: markdown_extensions: - toc: permalink: True Note that a colon ( : ) must follow the extension name ( toc ) and then on a new line the option name and value must be indented and separated by a colon. If you would like to define multiple options for a single extension, each option must be defined on a separate line: markdown_extensions: - toc: permalink: True separator: \"_\" Add an additional item to the list for each extension. If you have no configuration options to set for a specific extension, then simply omit options for that extension: markdown_extensions: - smarty - toc: permalink: True - sane_lists !!! note \"See Also:\" The Python-Markdown documentation provides a list of extensions which are available out-of-the-box. For a list of configuration options available for a given extension, see the documentation for that extension. You may also install and use various [third party extensions][3rd]. Consult the documentation provided by those extensions for installation instructions and available configuration options. default : [] (an empty list). plugins A list of plugins (with optional configuration settings) to use when building the site . See the Plugins documentation for full details. If the plugins config setting is defined in the mkdocs.yml config file, then any defaults (such as search ) are ignored and you need to explicitly re-enable the defaults if you would like to continue using them: plugins: - search - your_other_plugin To completely disable all plugins, including any defaults, set the plugins setting to an empty list: plugins: [] default : ['search'] (the \"search\" plugin included with MkDocs). Search A search plugin is provided by default with MkDocs which uses lunr.js as a search engine. The following config options are available to alter the behavior of the search plugin: separator A regular expression which matches the characters used as word separators when building the index. By default whitespace and the hyphen ( - ) are used. To add the dot ( . ) as a word separator you might do this: plugins: - search: separator: '[\\s\\-\\.]+' default : '[\\s\\-]+' lang A list of languages to use when building the search index as identified by their ISO 639-1 language codes. With Lunr Languages , the following languages are supported: da : Danish du : Dutch en : English fi : Finnish fr : French de : German hu : Hungarian it : Italian jp : Japanese no : Norwegian pt : Portuguese ro : Romanian ru : Russian es : Spanish sv : Swedish th : Thai tr : Turkish You may contribute additional languages . !!! Warning While search does support using multiple languages together, it is best not to add additional languages unless you really need them. Each additional language adds significant bandwidth requirements and uses more browser resources. Generally it is best to keep each instance of MkDocs to a single language. !!! Note Lunr Languages does not currently include support for Chinese or other Asian languages. However, some users have reported decent results using Japanese. default : ['en'] prebuild_index Optionally generates a pre-built index of all pages, which provides some performance improvements for larger sites. Before enabling, check that the theme you are using explicitly supports using a prebuilt index (the builtin themes do). The pre-build script requires that Node.js be installed and the command node be on the system path. If this feature is enabled and fails for any reason, a warning is issued. You may use the --strict flag when building to cause such a failure to raise an error instead. !!! Note On smaller sites, using a pre-built index is not recommended as it creates a significant increase is bandwidth requirements with little to no noticeable improvement to your users. However, for larger sites (hundreds of pages), the bandwidth increase is relatively small and your users will notice a significant improvement in search performance. default : False","title":"Configuration"},{"location":"user-guide/configuration/#configuration","text":"Guide to all available configuration settings.","title":"Configuration"},{"location":"user-guide/configuration/#introduction","text":"Project settings are always configured by using a YAML configuration file in the project directory named mkdocs.yml . As a minimum this configuration file must contain the site_name setting. All other settings are optional.","title":"Introduction"},{"location":"user-guide/configuration/#project-information","text":"","title":"Project information"},{"location":"user-guide/configuration/#site_name","text":"This is a required setting , and should be a string that is used as the main title for the project documentation. For example: site_name: Marshmallow Generator When rendering the theme this setting will be passed as the site_name context variable.","title":"site_name"},{"location":"user-guide/configuration/#site_url","text":"Set the canonical URL of the site. This will add a link tag with the canonical URL to the generated HTML header. default : null","title":"site_url"},{"location":"user-guide/configuration/#repo_url","text":"When set, provides a link to your repository (GitHub, Bitbucket, GitLab, ...) on each page. repo_url: https://github.com/example/repository/ default : null","title":"repo_url"},{"location":"user-guide/configuration/#repo_name","text":"When set, provides the name for the link to your repository on each page. default : 'GitHub' , 'Bitbucket' or 'GitLab' if the repo_url matches those domains, otherwise the hostname from the repo_url .","title":"repo_name"},{"location":"user-guide/configuration/#edit_uri","text":"Path from the base repo_url to the docs directory when directly viewing a page, accounting for specifics of the repository host (e.g. GitHub, Bitbucket, etc), the branch, and the docs directory itself. MkDocs concatenates repo_url and edit_uri , and appends the input path of the page. When set, and if your theme supports it, provides a link directly to the page in your source repository. This makes it easier to find and edit the source for the page. If repo_url is not set, this option is ignored. On some themes, setting this option may cause an edit link to be used in place of a repository link. Other themes may show both links. The edit_uri supports query ('?') and fragment ('#') characters. For repository hosts that use a query or a fragment to access the files, the edit_uri might be set as follows. (Note the ? and # in the URI...) # Query string example edit_uri: '?query=root/path/docs/' # Hash fragment example edit_uri: '#root/path/docs/' For other repository hosts, simply specify the relative path to the docs directory. # Query string example edit_uri: root/path/docs/ !!! note On a few known hosts (specifically GitHub, Bitbucket and GitLab), the edit_uri is derived from the 'repo_url' and does not need to be set manually. Simply defining a repo_url will automatically populate the edit_uri configs setting. For example, for a GitHub- or GitLab-hosted repository, the `edit_uri` would be automatically set as `edit/master/docs/` (Note the `edit` path and `master` branch). For a Bitbucket-hosted repository, the equivalent `edit_uri` would be automatically set as `src/default/docs/` (note the `src` path and `default` branch). To use a different URI than the default (for example a different branch), simply set the `edit_uri` to your desired string. If you do not want any \"edit URL link\" displayed on your pages, then set `edit_uri` to an empty string to disable the automatic setting. !!! warning On GitHub and GitLab, the default \"edit\" path ( edit/master/docs/ ) opens the page in the online editor. This functionality requires that the user have and be logged in to a GitHub/GitLab account. Otherwise, the user will be redirected to a login/signup page. Alternatively, use the \"blob\" path ( blob/master/docs/ ) to open a read-only view, which supports anonymous access. default : edit/master/docs/ for GitHub and GitLab repos or src/default/docs/ for a Bitbucket repo, if repo_url matches those domains, otherwise null","title":"edit_uri"},{"location":"user-guide/configuration/#site_description","text":"Set the site description. This will add a meta tag to the generated HTML header. default : null","title":"site_description"},{"location":"user-guide/configuration/#site_author","text":"Set the name of the author. This will add a meta tag to the generated HTML header. default : null","title":"site_author"},{"location":"user-guide/configuration/#copyright","text":"Set the copyright information to be included in the documentation by the theme. default : null","title":"copyright"},{"location":"user-guide/configuration/#google_analytics","text":"Set the Google analytics tracking configuration. google_analytics: ['UA-36723568-3', 'mkdocs.org'] default : null","title":"google_analytics"},{"location":"user-guide/configuration/#remote_branch","text":"Set the remote branch to commit to when using gh-deploy to deploy to Github Pages. This option can be overridden by a command line option in gh-deploy . default : gh-pages","title":"remote_branch"},{"location":"user-guide/configuration/#remote_name","text":"Set the remote name to push to when using gh-deploy to deploy to Github Pages. This option can be overridden by a command line option in gh-deploy . default : origin","title":"remote_name"},{"location":"user-guide/configuration/#documentation-layout","text":"","title":"Documentation layout"},{"location":"user-guide/configuration/#nav","text":"This setting is used to determine the format and layout of the global navigation for the site. For example, the following would create \"Introduction\", \"User Guide\" and \"About\" navigation items. nav: - 'Introduction': 'index.md' - 'User Guide': 'user-guide.md' - 'About': 'about.md' All paths must be relative to the mkdocs.yml configuration file. See the section on configuring pages and navigation for a more detailed breakdown, including how to create sub-sections. Navigation items may also include links to external sites. While titles are optional for internal links, they are required for external links. An external link may be a full URL or a relative URL. Any path which is not found in the files is assumed to be an external link. nav: - Home: index.md - User Guide: user-guide.md - Bug Tracker: https://example.com/ In the above example, the first two items point to local files while the third points to an external site. However, sometimes the MkDocs site is hosted in a subdirectory of a project's site and you may want to link to other parts of the same site without including the full domain. In that case, you may use and appropriate relative URL. site_url: https://example.com/foo/ nav: - Home: ../ - User Guide: user-guide.md - Bug Tracker: /bugs/ In the above example, two different styles of external links are used. First note that the site_url indicates that the MkDocs site is hosted in the /foo/ subdirectory of the domain. Therefore, the Home navigation item is a relative link which steps up one level to the server root and effectively points to https://example.com/ . The Bug Tracker item uses an absolute path from the server root and effectively points to https://example.com/bugs/ . Of course, the User Guide points to a local MkDocs page. default : By default nav will contain an alphanumerically sorted, nested list of all the Markdown files found within the docs_dir and its sub-directories. If none are found it will be [] (an empty list).","title":"nav"},{"location":"user-guide/configuration/#build-directories","text":"","title":"Build directories"},{"location":"user-guide/configuration/#theme","text":"Sets the theme and theme specific configuration of your documentation site. May be either a string or a set of key/value pairs. If a string, it must be the string name of a known installed theme. For a list of available themes visit styling your docs . An example set of key/value pairs might look something like this: theme: name: mkdocs custom_dir: my_theme_customizations/ static_templates: - sitemap.html include_sidebar: false If a set of key/value pairs, the following nested keys can be defined: !!! block \"\" #### name: The string name of a known installed theme. For a list of available themes visit [styling your docs]. #### custom_dir: A directory containing a custom theme. This can either be a relative directory, in which case it is resolved relative to the directory containing your configuration file, or it can be an absolute directory path from the root of your local file system. See [styling your docs][theme_dir] for details if you would like to tweak an existing theme. See [custom themes] if you would like to build your own theme from the ground up. #### static_templates: A list of templates to render as static pages. The templates must be located in either the theme's template directory or in the `custom_dir` defined in the theme configuration. #### (theme specific keywords) Any additional keywords supported by the theme can also be defined. See the documentation for the theme you are using for details. default : 'mkdocs'","title":"theme"},{"location":"user-guide/configuration/#docs_dir","text":"The directory containing the documentation source markdown files. This can either be a relative directory, in which case it is resolved relative to the directory containing your configuration file, or it can be an absolute directory path from the root of your local file system. default : 'docs'","title":"docs_dir"},{"location":"user-guide/configuration/#site_dir","text":"The directory where the output HTML and other files are created. This can either be a relative directory, in which case it is resolved relative to the directory containing your configuration file, or it can be an absolute directory path from the root of your local file system. default : 'site' !!! note \"Note:\" If you are using source code control you will normally want to ensure that your build output files are not committed into the repository, and only keep the source files under version control. For example, if using git you might add the following line to your .gitignore file: site/ If you're using another source code control tool, you'll want to check its documentation on how to ignore specific directories.","title":"site_dir"},{"location":"user-guide/configuration/#extra_css","text":"Set a list of CSS files in your docs_dir to be included by the theme. For example, the following example will include the extra.css file within the css subdirectory in your docs_dir . extra_css: - css/extra.css - css/second_extra.css default : [] (an empty list).","title":"extra_css"},{"location":"user-guide/configuration/#extra_javascript","text":"Set a list of JavaScript files in your docs_dir to be included by the theme. See the example in extra_css for usage. default : [] (an empty list).","title":"extra_javascript"},{"location":"user-guide/configuration/#extra_templates","text":"Set a list of templates in your docs_dir to be built by MkDocs. To see more about writing templates for MkDocs read the documentation about custom themes and specifically the section about the variables that are available to templates. See the example in extra_css for usage. default : [] (an empty list).","title":"extra_templates"},{"location":"user-guide/configuration/#extra","text":"A set of key value pairs, where the values can be any valid YAML construct, that will be passed to the template. This allows for great flexibility when creating custom themes. For example, if you are using a theme that supports displaying the project version, you can pass it to the theme like this: extra: version: 1.0 default : By default extra will be an empty key value mapping.","title":"extra"},{"location":"user-guide/configuration/#preview-controls","text":"","title":"Preview controls"},{"location":"user-guide/configuration/#use_directory_urls","text":"This setting controls the style used for linking to pages within the documentation. The following table demonstrates how the URLs used on the site differ when setting use_directory_urls to true or false . Source file use_directory_urls: true use_directory_urls: false index.md / /index.html api-guide.md /api-guide/ /api-guide.html about/license.md /about/license/ /about/license.html The default style of use_directory_urls: true creates more user friendly URLs, and is usually what you'll want to use. The alternate style can occasionally be useful if you want your documentation to remain properly linked when opening pages directly from the file system, because it creates links that point directly to the target file rather than the target directory . default : true","title":"use_directory_urls"},{"location":"user-guide/configuration/#strict","text":"Determines how warnings are handled. Set to true to halt processing when a warning is raised. Set to false to print a warning and continue processing. default : false","title":"strict"},{"location":"user-guide/configuration/#dev_addr","text":"Determines the address used when running mkdocs serve . Must be of the format IP:PORT . Allows a custom default to be set without the need to pass it through the --dev_addr option every time the mkdocs serve command is called. default : '127.0.0.1:8000'","title":"dev_addr"},{"location":"user-guide/configuration/#formatting-options","text":"","title":"Formatting options"},{"location":"user-guide/configuration/#markdown_extensions","text":"MkDocs uses the Python Markdown library to translate Markdown files into HTML. Python Markdown supports a variety of extensions that customize how pages are formatted. This setting lets you enable a list of extensions beyond the ones that MkDocs uses by default ( meta , toc , tables , and fenced_code ). For example, to enable the SmartyPants typography extension , use: markdown_extensions: - smarty Some extensions provide configuration options of their own. If you would like to set any configuration options, then you can nest a key/value mapping ( option_name: option value ) of any options that a given extension supports. See the documentation for the extension you are using to determine what options they support. For example, to enable permalinks in the (included) toc extension, use: markdown_extensions: - toc: permalink: True Note that a colon ( : ) must follow the extension name ( toc ) and then on a new line the option name and value must be indented and separated by a colon. If you would like to define multiple options for a single extension, each option must be defined on a separate line: markdown_extensions: - toc: permalink: True separator: \"_\" Add an additional item to the list for each extension. If you have no configuration options to set for a specific extension, then simply omit options for that extension: markdown_extensions: - smarty - toc: permalink: True - sane_lists !!! note \"See Also:\" The Python-Markdown documentation provides a list of extensions which are available out-of-the-box. For a list of configuration options available for a given extension, see the documentation for that extension. You may also install and use various [third party extensions][3rd]. Consult the documentation provided by those extensions for installation instructions and available configuration options. default : [] (an empty list).","title":"markdown_extensions"},{"location":"user-guide/configuration/#plugins","text":"A list of plugins (with optional configuration settings) to use when building the site . See the Plugins documentation for full details. If the plugins config setting is defined in the mkdocs.yml config file, then any defaults (such as search ) are ignored and you need to explicitly re-enable the defaults if you would like to continue using them: plugins: - search - your_other_plugin To completely disable all plugins, including any defaults, set the plugins setting to an empty list: plugins: [] default : ['search'] (the \"search\" plugin included with MkDocs).","title":"plugins"},{"location":"user-guide/configuration/#search","text":"A search plugin is provided by default with MkDocs which uses lunr.js as a search engine. The following config options are available to alter the behavior of the search plugin:","title":"Search"},{"location":"user-guide/configuration/#separator","text":"A regular expression which matches the characters used as word separators when building the index. By default whitespace and the hyphen ( - ) are used. To add the dot ( . ) as a word separator you might do this: plugins: - search: separator: '[\\s\\-\\.]+' default : '[\\s\\-]+'","title":"separator"},{"location":"user-guide/configuration/#lang","text":"A list of languages to use when building the search index as identified by their ISO 639-1 language codes. With Lunr Languages , the following languages are supported: da : Danish du : Dutch en : English fi : Finnish fr : French de : German hu : Hungarian it : Italian jp : Japanese no : Norwegian pt : Portuguese ro : Romanian ru : Russian es : Spanish sv : Swedish th : Thai tr : Turkish You may contribute additional languages . !!! Warning While search does support using multiple languages together, it is best not to add additional languages unless you really need them. Each additional language adds significant bandwidth requirements and uses more browser resources. Generally it is best to keep each instance of MkDocs to a single language. !!! Note Lunr Languages does not currently include support for Chinese or other Asian languages. However, some users have reported decent results using Japanese. default : ['en']","title":"lang"},{"location":"user-guide/configuration/#prebuild_index","text":"Optionally generates a pre-built index of all pages, which provides some performance improvements for larger sites. Before enabling, check that the theme you are using explicitly supports using a prebuilt index (the builtin themes do). The pre-build script requires that Node.js be installed and the command node be on the system path. If this feature is enabled and fails for any reason, a warning is issued. You may use the --strict flag when building to cause such a failure to raise an error instead. !!! Note On smaller sites, using a pre-built index is not recommended as it creates a significant increase is bandwidth requirements with little to no noticeable improvement to your users. However, for larger sites (hundreds of pages), the bandwidth increase is relatively small and your users will notice a significant improvement in search performance. default : False","title":"prebuild_index"},{"location":"user-guide/custom-themes/","text":"Custom themes A guide to creating and distributing custom themes. !!! Note If you are looking for third party themes, they are listed in the MkDocs [community wiki](https://github.com/mkdocs/mkdocs/wiki/MkDocs-Themes). If you want to share a theme you create, you should list it on the Wiki. When creating a new theme, you can either follow the steps in this guide to create one from scratch or you can download the mkdocs-basic-theme as a basic, yet complete, theme with all the boilerplate required. You can find this base theme on GitHub . It contains detailed comments in the code to describe the different features and their usage. Creating a custom theme The bare minimum required for a custom theme is a main.html Jinja2 template file which is placed in a directory that is not a child of the docs_dir . Within mkdocs.yml , set the theme. custom_dir option to the path of the directory containing main.html . The path should be relative to the configuration file. For example, given this example project layout: mkdocs.yml docs/ index.md about.md custom_theme/ main.html ... ... you would include the following settings in mkdocs.yml to use the custom theme directory: theme: name: null custom_dir: 'custom_theme/' !!! Note Generally, when building your own custom theme, the theme.[name] configuration setting would be set to `null`. However, if the theme.[custom_dir] configuration value is used in combination with an existing theme, the theme.[custom_dir] can be used to replace only specific parts of a built-in theme. For example, with the above layout and if you set `name: \"mkdocs\"` then the `main.html` file in the theme.[custom_dir] would replace the file of the same name in the `mkdocs` theme but otherwise the `mkdocs` theme would remain unchanged. This is useful if you want to make small adjustments to an existing theme. For more specific information, see [styling your docs]. Basic theme The simplest main.html file is the following: <!DOCTYPE html> <html> <head> <title>{% if page_title %}{{ page_title }} - {% endif %}{{ site_name }}</title> </head> <body> {{ content }} </body> </html> Article content from each page specified in mkdocs.yml is inserted using the {{ content }} tag. Style-sheets and scripts can be brought into this theme as with a normal HTML file. Navbars and tables of contents can also be generated and included automatically, through the nav and toc objects, respectively. If you wish to write your own theme, it is recommended to start with one of the built-in themes and modify it accordingly. !!! Note As MkDocs uses [Jinja] as its template engine, you have access to all the power of Jinja, including [template inheritance]. You may notice that the themes included with MkDocs make extensive use of template inheritance and blocks, allowing users to easily override small bits and pieces of the templates from the theme [custom_dir]. Therefore, the built-in themes are implemented in a `base.html` file, which `main.html` extends. Although not required, third party template authors are encouraged to follow a similar pattern and may want to define the same [blocks] as are used in the built-in themes for consistency. Template Variables Each template in a theme is built with a template context. These are the variables that are available to themes. The context varies depending on the template that is being built. At the moment templates are either built with the global context or with a page specific context. The global context is used for HTML pages that don't represent an individual Markdown document, for example a 404.html page or search.html. Global Context The following variables are available globally on any template. config The config variable is an instance of MkDocs' config object generated from the mkdocs.yml config file. While you can use any config option, some commonly used options include: config.site_name config.site_url config.site_author config.site_description config.extra_javascript config.extra_css config.repo_url config.repo_name config.copyright config.google_analytics nav The nav variable is used to create the navigation for the documentation. The nav object is an iterable of navigation objects as defined by the nav configuration setting. In addition to the iterable of navigation objects , the nav object contains the following attributes: nav.homepage The page object for the homepage of the site. nav.pages A flat list of all page objects contained in the navigation. This list is not necessarily a complete list of all site pages as it does not contain pages which are not included in the navigation. This list does match the list and order of pages used for all \"next page\" and \"previous page\" links. For a list of all pages, use the pages template variable. Nav Example Following is a basic usage example which outputs the first and second level navigation as a nested list. {% if nav|length>1 %} <ul> {% for nav_item in nav %} {% if nav_item.children %} <li>{{ nav_item.title }} <ul> {% for nav_item in nav_item.children %} <li class=\"{% if nav_item.active%}current{% endif %}\"> <a href=\"{{ nav_item.url|url }}\">{{ nav_item.title }}</a> </li> {% endfor %} </ul> </li> {% else %} <li class=\"{% if nav_item.active%}current{% endif %}\"> <a href=\"{{ nav_item.url|url }}\">{{ nav_item.title }}</a> </li> {% endif %} {% endfor %} </ul> {% endif %} base_url The base_url provides a relative path to the root of the MkDocs project. While this can be used directly by prepending it to a local relative URL, it is best to use the url template filter, which is smarter about how it applies base_url . mkdocs_version Contains the current MkDocs version. build_date_utc A Python datetime object that represents the date and time the documentation was built in UTC. This is useful for showing how recently the documentation was updated. pages A list of page objects including all pages in the project. The list is a flat list with all pages sorted alphanumerically by directory and file name. Note that index pages sort to the top within a directory. This list can contain pages not included in the global navigation and may not match the order of pages within that navigation. page In templates which are not rendered from a Markdown source file, the page variable is None . In templates which are rendered from a Markdown source file, the page variable contains a page object. The same page objects are used as page navigation objects in the global navigation and in the pages template variable. All page objects contain the following attributes: page.title Contains the Title for the current page. page.content The rendered Markdown as HTML, this is the contents of the documentation. page.toc An iterable object representing the Table of contents for a page. Each item in the toc is an AnchorLink which contains the following attributes: AnchorLink.title : The text of the item. AnchorLink.url : The hash fragment of a URL pointing to the item. AnchorLink.level : The zero-based level of the item. AnchorLink.children : An iterable of any child items. The following example would display the top two levels of the Table of Contents for a page. <ul> {% for toc_item in page.toc %} <li><a href=\"{{ toc_item.url }}\">{{ toc_item.title }}</a></li> {% for toc_item in toc_item.children %} <li><a href=\"{{ toc_item.url }}\">{{ toc_item.title }}</a></li> {% endfor %} {% endfor %} </ul> page.meta A mapping of the metadata included at the top of the markdown page. In this example we define a source property above the page title. source: generics.py mixins.py # Page title Content... A template can access this metadata for the page with the meta.source variable. This could then be used to link to source files related to the documentation page. {% for filename in page.meta.source %} <a class=\"github\" href=\"https://github.com/.../{{ filename }}\"> <span class=\"label label-info\">{{ filename }}</span> </a> {% endfor %} page.url The URL of the page relative to the MkDocs site_dir . It is expected that this be used with the url filter to ensure the URL is relative to the current page. <a href=\"{{ page.url|url }}\">{{ page.title }}</a> page.abs_url The absolute URL of the page from the server root as determined by the value assigned to the site_url configuration setting. The value includes any subdirectory included in the site_url , but not the domain. base_url should not be used with this variable. For example, if site_url: https://example.com/ , then the value of page.abs_url for the page foo.md would be /foo/ . However, if site_url: https://example.com/bar/ , then the value of page.abs_url for the page foo.md would be /bar/foo/ . page.canonical_url The full, canonical URL to the current page as determined by the value assigned to the site_url configuration setting. The value includes the domain and any subdirectory included in the site_url . base_url should not be used with this variable. page.edit_url The full URL to the source page in the source repository. Typically used to provide a link to edit the source page. base_url should not be used with this variable. page.is_homepage Evaluates to True for the homepage of the site and False for all other pages. This can be used in conjunction with other attributes of the page object to alter the behavior. For example, to display a different title on the homepage: {% if not page.is_homepage %}{{ page.title }} - {% endif %}{{ site_name }} page.previous_page The page object for the previous page or None . The value will be None if the current page is the first item in the site navigation or if the current page is not included in the navigation at all. When the value is a page object, the usage is the same as for page . page.next_page The page object for the next page or None . The value will be None if the current page is the last item in the site navigation or if the current page is not included in the navigation at all. When the value is a page object, the usage is the same as for page . page.parent The immediate parent of the page in the site navigation . None if the page is at the top level. page.children Pages do not contain children and the attribute is always None . page.active When True , indicates that this page is the currently viewed page. Defaults to False . page.is_section Indicates that the navigation object is a \"section\" object. Always False for page objects. page.is_page Indicates that the navigation object is a \"page\" object. Always True for page objects. page.is_link Indicates that the navigation object is a \"link\" object. Always False for page objects. Navigation Objects Navigation objects contained in the nav template variable may be one of section objects, page objects, and link objects. While section objects may contain nested navigation objects, pages and links do not. Page objects are the full page object as used for the current page with all of the same attributes available. Section and Link objects contain a subset of those attributes as defined below: Section A section navigation object defines a named section in the navigation and contains a list of child navigation objects. Note that sections do not contain URLs and are not links of any kind. However, by default, MkDocs sorts index pages to the top and the first child might be used as the URL for a section if a theme choses to do so. The following attributes are available on section objects: section.title The title of the section. section.parent The immediate parent of the section or None if the section is at the top level. section.children An iterable of all child navigation objects. Children may include nested sections, pages and links. section.active When True , indicates that a child page of this section is the current page and can be used to highlight the section as the currently viewed section. Defaults to False . section.is_section Indicates that the navigation object is a \"section\" object. Always True for section objects. section.is_page Indicates that the navigation object is a \"page\" object. Always False for section objects. section.is_link Indicates that the navigation object is a \"link\" object. Always False for section objects. Link A link navigation object contains a link which does not point to an internal MkDocs page. The following attributes are available on link objects: link.title The title of the link. This would generally be used as the label of the link. link.url The URL that the link points to. The URL should always be an absolute URLs and should not need to have base_url prepened. link.parent The immediate parent of the link. None if the link is at the top level. link.children Links do not contain children and the attribute is always None . link.active External links cannot be \"active\" and the attribute is always False . link.is_section Indicates that the navigation object is a \"section\" object. Always False for link objects. link.is_page Indicates that the navigation object is a \"page\" object. Always False for link objects. link.is_link Indicates that the navigation object is a \"link\" object. Always True for link objects. Extra Context Additional variables can be passed to the template with the extra configuration option. This is a set of key value pairs that can make custom templates far more flexible. For example, this could be used to include the project version of all pages and a list of links related to the project. This can be achieved with the following extra configuration: extra: version: 0.13.0 links: - https://github.com/mkdocs - https://docs.readthedocs.org/en/latest/builds.html#mkdocs - https://www.mkdocs.org/ And then displayed with this HTML in the custom theme. {{ config.extra.version }} {% if config.extra.links %} <ul> {% for link in config.extra.links %} <li>{{ link }}</li> {% endfor %} </ul> {% endif %} Template Filters In addition to Jinja's default filters, the following custom filters are available to use in MkDocs templates: url Normalizes a URL. Absolute URLs are passed through unaltered. If the URL is relative and the template context includes a page object, then the URL is returned relative to the page object. Otherwise, the URL is returned with base_url prepended. <a href=\"{{ page.url|url }}\">{{ page.title }}</a> tojson Safety convert a Python object to a value in a JavaScript script. <script> var mkdocs_page_name = {{ page.title|tojson|safe }}; </script> Search and themes As of MkDocs version 0.17 client side search support has been added to MkDocs via the search plugin. A theme needs to provide a few things for the plugin to work with the theme. While the search plugin is activated by default, users can disable the plugin and themes should account for this. It is recommended that theme templates wrap search specific markup with a check for the plugin: {% if 'search' in config['plugins'] %} search stuff here... {% endif %} At its most basic functionality, the search plugin will simply provide an index file which is no more than a JSON file containing the content of all pages. The theme would need to implement its own search functionality client-side. However, with a few settings and the necessary templates, the plugin can provide a complete functioning client-side search tool based on lunr.js . The following HTML needs to be added to the theme so that the provided JavaScript is able to properly load the search scripts and make relative links to the search results from the current page. <script>var base_url = '{{ base_url }}';</script> With properly configured settings, the following HTML in a template will add a full search implementation to your theme. <h1 id=\"search\">Search Results</h1> <form action=\"search.html\"> <input name=\"q\" id=\"mkdocs-search-query\" type=\"text\" > </form> <div id=\"mkdocs-search-results\"> Sorry, page not found. </div> The JavaScript in the plugin works by looking for the specific ID's used in the above HTML. The form input for the user to type the search query must be identified with id=\"mkdocs-search-query\" and the div where the results will be placed must be identified with id=\"mkdocs-search-results\" . The plugin supports the following options being set in the theme's configuration file , mkdocs_theme.yml : include_search_page Determines whether the search plugin expects the theme to provide a dedicated search page via a template located at search/search.html . When include_search_page is set to true , the search template will be built and available at search/search.html . This method is used by the readthedocs theme. When include_search_page is set to false or not defined, it is expected that the theme provide some other mechanisms for displaying search results. For example, the mkdocs theme displays results on any page via a modal. search_index_only Determines whether the search plugin should only generate a search index or a complete search solution. When search_index_only is set to false , then the search plugin modifies the Jinja environment by adding its own templates directory (with a lower precedence than the theme) and adds its scripts to the extra_javascript config setting. When search_index_only is set to true or not defined, the search plugin makes no modifications to the Jinja environment. A complete solution using the provided index file is the responsibility of the theme. The search index is written to a JSON file at search/search_index.json in the site_dir . The JSON object contained within the file may contain up to three objects. { config: {...}, data: [...], index: {...} } If present, the config object contains the key/value pairs of config options defined for the plugin in the user's mkdocs.yml config file under plugings.search . The config object was new in MkDocs version 1.0 . The data object contains a list of document objects. Each document object is made up of a location (URL), a title , and text which can be used to create a search index and/or display search results. If present, the index object contains a pre-built index which offers performance improvements for larger sites. Note that the pre-built index is only created if the user explicitly enables the prebuild_index config option. Themes should expect the index to not be present, but can choose to use the index when it is available. The index object was new in MkDocs version 1.0 . Packaging Themes MkDocs makes use of Python packaging to distribute themes. This comes with a few requirements. To see an example of a package containing one theme, see the MkDocs Bootstrap theme and to see a package that contains many themes, see the MkDocs Bootswatch theme . !!! Note It is not strictly necessary to package a theme, as the entire theme can be contained in the `custom_dir`. If you have created a \"one-off theme,\" that should be sufficient. However, if you intend to distribute your theme for others to use, packaging the theme has some advantages. By packaging your theme, your users can more easily install it and they can then take advantage of the [custom_dir] to make tweaks to your theme to better suit their needs. Package Layout The following layout is recommended for themes. Two files at the top level directory called MANIFEST.in and setup.py beside the theme directory which contains an empty __init__.py file, a theme configuration file ( mkdocs-theme.yml ), and your template and media files. . |-- MANIFEST.in |-- theme_name | |-- __init__.py | |-- mkdocs-theme.yml | |-- main.html | |-- styles.css `-- setup.py The MANIFEST.in file should contain the following contents but with theme_name updated and any extra file extensions added to the include. recursive-include theme_name *.ico *.js *.css *.png *.html *.eot *.svg *.ttf *.woff recursive-exclude * __pycache__ recursive-exclude * *.py[co] The setup.py should include the following text with the modifications described below. from setuptools import setup, find_packages VERSION = '0.0.1' setup( name=\"mkdocs-themename\", version=VERSION, url='', license='', description='', author='', author_email='', packages=find_packages(), include_package_data=True, entry_points={ 'mkdocs.themes': [ 'themename = theme_name', ] }, zip_safe=False ) Fill in the URL, license, description, author and author email address. The name should follow the convention mkdocs-themename (like mkdocs- bootstrap and mkdocs-bootswatch ), starting with MkDocs, using hyphens to separate words and including the name of your theme. Most of the rest of the file can be left unedited. The last section we need to change is the entry_points. This is how MkDocs finds the theme(s) you are including in the package. The name on the left is the one that users will use in their mkdocs.yml and the one on the right is the directory containing your theme files. The directory you created at the start of this section with the main.html file should contain all of the other theme files. The minimum requirement is that it includes a main.html for the theme. It must also include a __init__.py file which should be empty, this file tells Python that the directory is a package. Theme Configuration A packaged theme is required to include a configuration file named mkdocs_theme.yml which is placed in the root of your template files. The file should contain default configuration options for the theme. However, if the theme offers no configuration options, the file is still required and can be left blank. The theme author is free to define any arbitrary options deemed necessary and those options will be made available in the templates to control behavior. For example, a theme might want to make a sidebar optional and include the following in the mkdocs_theme.yml file: show_sidebar: true Then in a template, that config option could be referenced: {% if config.theme.show_sidebar %} <div id=\"sidebar\">...</div> {% endif %} And the user could override the default in their project's mkdocs.yml config file: theme: name: themename show_sidebar: false In addition to arbitrary options defined by the theme, MkDocs defines a few special options which alters its behavior: !!! block \"\" #### static_templates This option mirrors the [theme] config option of the same name and allows some defaults to be set by the theme. Note that while the user can add templates to this list, the user cannot remove templates included in the theme's config. #### extends Defines a parent theme that this theme inherits from. The value should be the string name of the parent theme. Normal Jinja inheritance rules apply. Plugins may also define some options which allow the theme to inform a plugin about which set of plugin options it expects. See the documentation for any plugins you may wish to support in your theme. Distributing Themes With the above changes, your theme should now be ready to install. This can be done with pip, using pip install . if you are still in the same directory as the setup.py. Most Python packages, including MkDocs, are distributed on PyPI. To do this, you should run the following command. python setup.py register If you don't have an account setup, you should be prompted to create one. For a much more detailed guide, see the official Python packaging documentation for Packaging and Distributing Projects .","title":"Custom themes"},{"location":"user-guide/custom-themes/#custom-themes","text":"A guide to creating and distributing custom themes. !!! Note If you are looking for third party themes, they are listed in the MkDocs [community wiki](https://github.com/mkdocs/mkdocs/wiki/MkDocs-Themes). If you want to share a theme you create, you should list it on the Wiki. When creating a new theme, you can either follow the steps in this guide to create one from scratch or you can download the mkdocs-basic-theme as a basic, yet complete, theme with all the boilerplate required. You can find this base theme on GitHub . It contains detailed comments in the code to describe the different features and their usage.","title":"Custom themes"},{"location":"user-guide/custom-themes/#creating-a-custom-theme","text":"The bare minimum required for a custom theme is a main.html Jinja2 template file which is placed in a directory that is not a child of the docs_dir . Within mkdocs.yml , set the theme. custom_dir option to the path of the directory containing main.html . The path should be relative to the configuration file. For example, given this example project layout: mkdocs.yml docs/ index.md about.md custom_theme/ main.html ... ... you would include the following settings in mkdocs.yml to use the custom theme directory: theme: name: null custom_dir: 'custom_theme/' !!! Note Generally, when building your own custom theme, the theme.[name] configuration setting would be set to `null`. However, if the theme.[custom_dir] configuration value is used in combination with an existing theme, the theme.[custom_dir] can be used to replace only specific parts of a built-in theme. For example, with the above layout and if you set `name: \"mkdocs\"` then the `main.html` file in the theme.[custom_dir] would replace the file of the same name in the `mkdocs` theme but otherwise the `mkdocs` theme would remain unchanged. This is useful if you want to make small adjustments to an existing theme. For more specific information, see [styling your docs].","title":"Creating a custom theme"},{"location":"user-guide/custom-themes/#basic-theme","text":"The simplest main.html file is the following: <!DOCTYPE html> <html> <head> <title>{% if page_title %}{{ page_title }} - {% endif %}{{ site_name }}</title> </head> <body> {{ content }} </body> </html> Article content from each page specified in mkdocs.yml is inserted using the {{ content }} tag. Style-sheets and scripts can be brought into this theme as with a normal HTML file. Navbars and tables of contents can also be generated and included automatically, through the nav and toc objects, respectively. If you wish to write your own theme, it is recommended to start with one of the built-in themes and modify it accordingly. !!! Note As MkDocs uses [Jinja] as its template engine, you have access to all the power of Jinja, including [template inheritance]. You may notice that the themes included with MkDocs make extensive use of template inheritance and blocks, allowing users to easily override small bits and pieces of the templates from the theme [custom_dir]. Therefore, the built-in themes are implemented in a `base.html` file, which `main.html` extends. Although not required, third party template authors are encouraged to follow a similar pattern and may want to define the same [blocks] as are used in the built-in themes for consistency.","title":"Basic theme"},{"location":"user-guide/custom-themes/#template-variables","text":"Each template in a theme is built with a template context. These are the variables that are available to themes. The context varies depending on the template that is being built. At the moment templates are either built with the global context or with a page specific context. The global context is used for HTML pages that don't represent an individual Markdown document, for example a 404.html page or search.html.","title":"Template Variables"},{"location":"user-guide/custom-themes/#global-context","text":"The following variables are available globally on any template.","title":"Global Context"},{"location":"user-guide/custom-themes/#config","text":"The config variable is an instance of MkDocs' config object generated from the mkdocs.yml config file. While you can use any config option, some commonly used options include: config.site_name config.site_url config.site_author config.site_description config.extra_javascript config.extra_css config.repo_url config.repo_name config.copyright config.google_analytics","title":"config"},{"location":"user-guide/custom-themes/#nav","text":"The nav variable is used to create the navigation for the documentation. The nav object is an iterable of navigation objects as defined by the nav configuration setting. In addition to the iterable of navigation objects , the nav object contains the following attributes:","title":"nav"},{"location":"user-guide/custom-themes/#navhomepage","text":"The page object for the homepage of the site.","title":"nav.homepage"},{"location":"user-guide/custom-themes/#navpages","text":"A flat list of all page objects contained in the navigation. This list is not necessarily a complete list of all site pages as it does not contain pages which are not included in the navigation. This list does match the list and order of pages used for all \"next page\" and \"previous page\" links. For a list of all pages, use the pages template variable.","title":"nav.pages"},{"location":"user-guide/custom-themes/#nav-example","text":"Following is a basic usage example which outputs the first and second level navigation as a nested list. {% if nav|length>1 %} <ul> {% for nav_item in nav %} {% if nav_item.children %} <li>{{ nav_item.title }} <ul> {% for nav_item in nav_item.children %} <li class=\"{% if nav_item.active%}current{% endif %}\"> <a href=\"{{ nav_item.url|url }}\">{{ nav_item.title }}</a> </li> {% endfor %} </ul> </li> {% else %} <li class=\"{% if nav_item.active%}current{% endif %}\"> <a href=\"{{ nav_item.url|url }}\">{{ nav_item.title }}</a> </li> {% endif %} {% endfor %} </ul> {% endif %}","title":"Nav Example"},{"location":"user-guide/custom-themes/#base_url","text":"The base_url provides a relative path to the root of the MkDocs project. While this can be used directly by prepending it to a local relative URL, it is best to use the url template filter, which is smarter about how it applies base_url .","title":"base_url"},{"location":"user-guide/custom-themes/#mkdocs_version","text":"Contains the current MkDocs version.","title":"mkdocs_version"},{"location":"user-guide/custom-themes/#build_date_utc","text":"A Python datetime object that represents the date and time the documentation was built in UTC. This is useful for showing how recently the documentation was updated.","title":"build_date_utc"},{"location":"user-guide/custom-themes/#pages","text":"A list of page objects including all pages in the project. The list is a flat list with all pages sorted alphanumerically by directory and file name. Note that index pages sort to the top within a directory. This list can contain pages not included in the global navigation and may not match the order of pages within that navigation.","title":"pages"},{"location":"user-guide/custom-themes/#page","text":"In templates which are not rendered from a Markdown source file, the page variable is None . In templates which are rendered from a Markdown source file, the page variable contains a page object. The same page objects are used as page navigation objects in the global navigation and in the pages template variable. All page objects contain the following attributes:","title":"page"},{"location":"user-guide/custom-themes/#pagetitle","text":"Contains the Title for the current page.","title":"page.title"},{"location":"user-guide/custom-themes/#pagecontent","text":"The rendered Markdown as HTML, this is the contents of the documentation.","title":"page.content"},{"location":"user-guide/custom-themes/#pagetoc","text":"An iterable object representing the Table of contents for a page. Each item in the toc is an AnchorLink which contains the following attributes: AnchorLink.title : The text of the item. AnchorLink.url : The hash fragment of a URL pointing to the item. AnchorLink.level : The zero-based level of the item. AnchorLink.children : An iterable of any child items. The following example would display the top two levels of the Table of Contents for a page. <ul> {% for toc_item in page.toc %} <li><a href=\"{{ toc_item.url }}\">{{ toc_item.title }}</a></li> {% for toc_item in toc_item.children %} <li><a href=\"{{ toc_item.url }}\">{{ toc_item.title }}</a></li> {% endfor %} {% endfor %} </ul>","title":"page.toc"},{"location":"user-guide/custom-themes/#pagemeta","text":"A mapping of the metadata included at the top of the markdown page. In this example we define a source property above the page title. source: generics.py mixins.py # Page title Content... A template can access this metadata for the page with the meta.source variable. This could then be used to link to source files related to the documentation page. {% for filename in page.meta.source %} <a class=\"github\" href=\"https://github.com/.../{{ filename }}\"> <span class=\"label label-info\">{{ filename }}</span> </a> {% endfor %}","title":"page.meta"},{"location":"user-guide/custom-themes/#pageurl","text":"The URL of the page relative to the MkDocs site_dir . It is expected that this be used with the url filter to ensure the URL is relative to the current page. <a href=\"{{ page.url|url }}\">{{ page.title }}</a>","title":"page.url"},{"location":"user-guide/custom-themes/#pageabs_url","text":"The absolute URL of the page from the server root as determined by the value assigned to the site_url configuration setting. The value includes any subdirectory included in the site_url , but not the domain. base_url should not be used with this variable. For example, if site_url: https://example.com/ , then the value of page.abs_url for the page foo.md would be /foo/ . However, if site_url: https://example.com/bar/ , then the value of page.abs_url for the page foo.md would be /bar/foo/ .","title":"page.abs_url"},{"location":"user-guide/custom-themes/#pagecanonical_url","text":"The full, canonical URL to the current page as determined by the value assigned to the site_url configuration setting. The value includes the domain and any subdirectory included in the site_url . base_url should not be used with this variable.","title":"page.canonical_url"},{"location":"user-guide/custom-themes/#pageedit_url","text":"The full URL to the source page in the source repository. Typically used to provide a link to edit the source page. base_url should not be used with this variable.","title":"page.edit_url"},{"location":"user-guide/custom-themes/#pageis_homepage","text":"Evaluates to True for the homepage of the site and False for all other pages. This can be used in conjunction with other attributes of the page object to alter the behavior. For example, to display a different title on the homepage: {% if not page.is_homepage %}{{ page.title }} - {% endif %}{{ site_name }}","title":"page.is_homepage"},{"location":"user-guide/custom-themes/#pageprevious_page","text":"The page object for the previous page or None . The value will be None if the current page is the first item in the site navigation or if the current page is not included in the navigation at all. When the value is a page object, the usage is the same as for page .","title":"page.previous_page"},{"location":"user-guide/custom-themes/#pagenext_page","text":"The page object for the next page or None . The value will be None if the current page is the last item in the site navigation or if the current page is not included in the navigation at all. When the value is a page object, the usage is the same as for page .","title":"page.next_page"},{"location":"user-guide/custom-themes/#pageparent","text":"The immediate parent of the page in the site navigation . None if the page is at the top level.","title":"page.parent"},{"location":"user-guide/custom-themes/#pagechildren","text":"Pages do not contain children and the attribute is always None .","title":"page.children"},{"location":"user-guide/custom-themes/#pageactive","text":"When True , indicates that this page is the currently viewed page. Defaults to False .","title":"page.active"},{"location":"user-guide/custom-themes/#pageis_section","text":"Indicates that the navigation object is a \"section\" object. Always False for page objects.","title":"page.is_section"},{"location":"user-guide/custom-themes/#pageis_page","text":"Indicates that the navigation object is a \"page\" object. Always True for page objects.","title":"page.is_page"},{"location":"user-guide/custom-themes/#pageis_link","text":"Indicates that the navigation object is a \"link\" object. Always False for page objects.","title":"page.is_link"},{"location":"user-guide/custom-themes/#navigation-objects","text":"Navigation objects contained in the nav template variable may be one of section objects, page objects, and link objects. While section objects may contain nested navigation objects, pages and links do not. Page objects are the full page object as used for the current page with all of the same attributes available. Section and Link objects contain a subset of those attributes as defined below:","title":"Navigation Objects"},{"location":"user-guide/custom-themes/#section","text":"A section navigation object defines a named section in the navigation and contains a list of child navigation objects. Note that sections do not contain URLs and are not links of any kind. However, by default, MkDocs sorts index pages to the top and the first child might be used as the URL for a section if a theme choses to do so. The following attributes are available on section objects:","title":"Section"},{"location":"user-guide/custom-themes/#sectiontitle","text":"The title of the section.","title":"section.title"},{"location":"user-guide/custom-themes/#sectionparent","text":"The immediate parent of the section or None if the section is at the top level.","title":"section.parent"},{"location":"user-guide/custom-themes/#sectionchildren","text":"An iterable of all child navigation objects. Children may include nested sections, pages and links.","title":"section.children"},{"location":"user-guide/custom-themes/#sectionactive","text":"When True , indicates that a child page of this section is the current page and can be used to highlight the section as the currently viewed section. Defaults to False .","title":"section.active"},{"location":"user-guide/custom-themes/#sectionis_section","text":"Indicates that the navigation object is a \"section\" object. Always True for section objects.","title":"section.is_section"},{"location":"user-guide/custom-themes/#sectionis_page","text":"Indicates that the navigation object is a \"page\" object. Always False for section objects.","title":"section.is_page"},{"location":"user-guide/custom-themes/#sectionis_link","text":"Indicates that the navigation object is a \"link\" object. Always False for section objects.","title":"section.is_link"},{"location":"user-guide/custom-themes/#link","text":"A link navigation object contains a link which does not point to an internal MkDocs page. The following attributes are available on link objects:","title":"Link"},{"location":"user-guide/custom-themes/#linktitle","text":"The title of the link. This would generally be used as the label of the link.","title":"link.title"},{"location":"user-guide/custom-themes/#linkurl","text":"The URL that the link points to. The URL should always be an absolute URLs and should not need to have base_url prepened.","title":"link.url"},{"location":"user-guide/custom-themes/#linkparent","text":"The immediate parent of the link. None if the link is at the top level.","title":"link.parent"},{"location":"user-guide/custom-themes/#linkchildren","text":"Links do not contain children and the attribute is always None .","title":"link.children"},{"location":"user-guide/custom-themes/#linkactive","text":"External links cannot be \"active\" and the attribute is always False .","title":"link.active"},{"location":"user-guide/custom-themes/#linkis_section","text":"Indicates that the navigation object is a \"section\" object. Always False for link objects.","title":"link.is_section"},{"location":"user-guide/custom-themes/#linkis_page","text":"Indicates that the navigation object is a \"page\" object. Always False for link objects.","title":"link.is_page"},{"location":"user-guide/custom-themes/#linkis_link","text":"Indicates that the navigation object is a \"link\" object. Always True for link objects.","title":"link.is_link"},{"location":"user-guide/custom-themes/#extra-context","text":"Additional variables can be passed to the template with the extra configuration option. This is a set of key value pairs that can make custom templates far more flexible. For example, this could be used to include the project version of all pages and a list of links related to the project. This can be achieved with the following extra configuration: extra: version: 0.13.0 links: - https://github.com/mkdocs - https://docs.readthedocs.org/en/latest/builds.html#mkdocs - https://www.mkdocs.org/ And then displayed with this HTML in the custom theme. {{ config.extra.version }} {% if config.extra.links %} <ul> {% for link in config.extra.links %} <li>{{ link }}</li> {% endfor %} </ul> {% endif %}","title":"Extra Context"},{"location":"user-guide/custom-themes/#template-filters","text":"In addition to Jinja's default filters, the following custom filters are available to use in MkDocs templates:","title":"Template Filters"},{"location":"user-guide/custom-themes/#url","text":"Normalizes a URL. Absolute URLs are passed through unaltered. If the URL is relative and the template context includes a page object, then the URL is returned relative to the page object. Otherwise, the URL is returned with base_url prepended. <a href=\"{{ page.url|url }}\">{{ page.title }}</a>","title":"url"},{"location":"user-guide/custom-themes/#tojson","text":"Safety convert a Python object to a value in a JavaScript script. <script> var mkdocs_page_name = {{ page.title|tojson|safe }}; </script>","title":"tojson"},{"location":"user-guide/custom-themes/#search-and-themes","text":"As of MkDocs version 0.17 client side search support has been added to MkDocs via the search plugin. A theme needs to provide a few things for the plugin to work with the theme. While the search plugin is activated by default, users can disable the plugin and themes should account for this. It is recommended that theme templates wrap search specific markup with a check for the plugin: {% if 'search' in config['plugins'] %} search stuff here... {% endif %} At its most basic functionality, the search plugin will simply provide an index file which is no more than a JSON file containing the content of all pages. The theme would need to implement its own search functionality client-side. However, with a few settings and the necessary templates, the plugin can provide a complete functioning client-side search tool based on lunr.js . The following HTML needs to be added to the theme so that the provided JavaScript is able to properly load the search scripts and make relative links to the search results from the current page. <script>var base_url = '{{ base_url }}';</script> With properly configured settings, the following HTML in a template will add a full search implementation to your theme. <h1 id=\"search\">Search Results</h1> <form action=\"search.html\"> <input name=\"q\" id=\"mkdocs-search-query\" type=\"text\" > </form> <div id=\"mkdocs-search-results\"> Sorry, page not found. </div> The JavaScript in the plugin works by looking for the specific ID's used in the above HTML. The form input for the user to type the search query must be identified with id=\"mkdocs-search-query\" and the div where the results will be placed must be identified with id=\"mkdocs-search-results\" . The plugin supports the following options being set in the theme's configuration file , mkdocs_theme.yml :","title":"Search and themes"},{"location":"user-guide/custom-themes/#include_search_page","text":"Determines whether the search plugin expects the theme to provide a dedicated search page via a template located at search/search.html . When include_search_page is set to true , the search template will be built and available at search/search.html . This method is used by the readthedocs theme. When include_search_page is set to false or not defined, it is expected that the theme provide some other mechanisms for displaying search results. For example, the mkdocs theme displays results on any page via a modal.","title":"include_search_page"},{"location":"user-guide/custom-themes/#search_index_only","text":"Determines whether the search plugin should only generate a search index or a complete search solution. When search_index_only is set to false , then the search plugin modifies the Jinja environment by adding its own templates directory (with a lower precedence than the theme) and adds its scripts to the extra_javascript config setting. When search_index_only is set to true or not defined, the search plugin makes no modifications to the Jinja environment. A complete solution using the provided index file is the responsibility of the theme. The search index is written to a JSON file at search/search_index.json in the site_dir . The JSON object contained within the file may contain up to three objects. { config: {...}, data: [...], index: {...} } If present, the config object contains the key/value pairs of config options defined for the plugin in the user's mkdocs.yml config file under plugings.search . The config object was new in MkDocs version 1.0 . The data object contains a list of document objects. Each document object is made up of a location (URL), a title , and text which can be used to create a search index and/or display search results. If present, the index object contains a pre-built index which offers performance improvements for larger sites. Note that the pre-built index is only created if the user explicitly enables the prebuild_index config option. Themes should expect the index to not be present, but can choose to use the index when it is available. The index object was new in MkDocs version 1.0 .","title":"search_index_only"},{"location":"user-guide/custom-themes/#packaging-themes","text":"MkDocs makes use of Python packaging to distribute themes. This comes with a few requirements. To see an example of a package containing one theme, see the MkDocs Bootstrap theme and to see a package that contains many themes, see the MkDocs Bootswatch theme . !!! Note It is not strictly necessary to package a theme, as the entire theme can be contained in the `custom_dir`. If you have created a \"one-off theme,\" that should be sufficient. However, if you intend to distribute your theme for others to use, packaging the theme has some advantages. By packaging your theme, your users can more easily install it and they can then take advantage of the [custom_dir] to make tweaks to your theme to better suit their needs.","title":"Packaging Themes"},{"location":"user-guide/custom-themes/#package-layout","text":"The following layout is recommended for themes. Two files at the top level directory called MANIFEST.in and setup.py beside the theme directory which contains an empty __init__.py file, a theme configuration file ( mkdocs-theme.yml ), and your template and media files. . |-- MANIFEST.in |-- theme_name | |-- __init__.py | |-- mkdocs-theme.yml | |-- main.html | |-- styles.css `-- setup.py The MANIFEST.in file should contain the following contents but with theme_name updated and any extra file extensions added to the include. recursive-include theme_name *.ico *.js *.css *.png *.html *.eot *.svg *.ttf *.woff recursive-exclude * __pycache__ recursive-exclude * *.py[co] The setup.py should include the following text with the modifications described below. from setuptools import setup, find_packages VERSION = '0.0.1' setup( name=\"mkdocs-themename\", version=VERSION, url='', license='', description='', author='', author_email='', packages=find_packages(), include_package_data=True, entry_points={ 'mkdocs.themes': [ 'themename = theme_name', ] }, zip_safe=False ) Fill in the URL, license, description, author and author email address. The name should follow the convention mkdocs-themename (like mkdocs- bootstrap and mkdocs-bootswatch ), starting with MkDocs, using hyphens to separate words and including the name of your theme. Most of the rest of the file can be left unedited. The last section we need to change is the entry_points. This is how MkDocs finds the theme(s) you are including in the package. The name on the left is the one that users will use in their mkdocs.yml and the one on the right is the directory containing your theme files. The directory you created at the start of this section with the main.html file should contain all of the other theme files. The minimum requirement is that it includes a main.html for the theme. It must also include a __init__.py file which should be empty, this file tells Python that the directory is a package.","title":"Package Layout"},{"location":"user-guide/custom-themes/#theme-configuration","text":"A packaged theme is required to include a configuration file named mkdocs_theme.yml which is placed in the root of your template files. The file should contain default configuration options for the theme. However, if the theme offers no configuration options, the file is still required and can be left blank. The theme author is free to define any arbitrary options deemed necessary and those options will be made available in the templates to control behavior. For example, a theme might want to make a sidebar optional and include the following in the mkdocs_theme.yml file: show_sidebar: true Then in a template, that config option could be referenced: {% if config.theme.show_sidebar %} <div id=\"sidebar\">...</div> {% endif %} And the user could override the default in their project's mkdocs.yml config file: theme: name: themename show_sidebar: false In addition to arbitrary options defined by the theme, MkDocs defines a few special options which alters its behavior: !!! block \"\" #### static_templates This option mirrors the [theme] config option of the same name and allows some defaults to be set by the theme. Note that while the user can add templates to this list, the user cannot remove templates included in the theme's config. #### extends Defines a parent theme that this theme inherits from. The value should be the string name of the parent theme. Normal Jinja inheritance rules apply. Plugins may also define some options which allow the theme to inform a plugin about which set of plugin options it expects. See the documentation for any plugins you may wish to support in your theme.","title":"Theme Configuration"},{"location":"user-guide/custom-themes/#distributing-themes","text":"With the above changes, your theme should now be ready to install. This can be done with pip, using pip install . if you are still in the same directory as the setup.py. Most Python packages, including MkDocs, are distributed on PyPI. To do this, you should run the following command. python setup.py register If you don't have an account setup, you should be prompted to create one. For a much more detailed guide, see the official Python packaging documentation for Packaging and Distributing Projects .","title":"Distributing Themes"},{"location":"user-guide/deploying-your-docs/","text":"Deploying your docs A basic guide to deploying your docs to various hosting providers GitHub Pages If you host the source code for a project on GitHub , you can easily use GitHub Pages to host the documentation for your project. There are two basic types of GitHub Pages sites: Project Pages sites, and User and Organization Pages sites. They are nearly identical but have some important differences, which require a different work flow when deploying. Project Pages Project Pages sites are simpler as the site files get deployed to a branch within the project repository ( gh-pages by default). After you checkout the primary working branch (usually master ) of the git repository where you maintain the source documentation for your project, run the following command: mkdocs gh-deploy That's it! Behind the scenes, MkDocs will build your docs and use the ghp-import tool to commit them to the gh-pages branch and push the gh-pages branch to GitHub. Use mkdocs gh-deploy --help to get a full list of options available for the gh-deploy command. Be aware that you will not be able to review the built site before it is pushed to GitHub. Therefore, you may want to verify any changes you make to the docs beforehand by using the build or serve commands and reviewing the built files locally. !!! warning You should never edit files in your pages repository by hand if you're using the `gh-deploy` command because you will lose your work the next time you run the command. Organization and User Pages User and Organization Pages sites are not tied to a specific project, and the site files are deployed to the master branch in a dedicated repository named with the GitHub account name. Therefore, you need working copies of two repositories on our local system. For example, consider the following file structure: my-project/ mkdocs.yml docs/ orgname.github.io/ After making and verifying updates to your project you need to change directories to the orgname.github.io repository and call the mkdocs gh-deploy command from there: cd ../orgname.github.io/ mkdocs gh-deploy --config-file ../my-project/mkdocs.yml --remote-branch master Note that you need to explicitly point to the mkdocs.yml configuration file as it is no longer in the current working directory. You also need to inform the deploy script to commit to the master branch. You may override the default with the remote_branch configuration setting, but if you forget to change directories before running the deploy script, it will commit to the master branch of your project, which you probably don't want. Be aware that you will not be able to review the built site before it is pushed to GitHub. Therefore, you may want to verify any changes you make to the docs beforehand by using the build or serve commands and reviewing the built files locally. !!! warning You should never edit files in your pages repository by hand if you're using the `gh-deploy` command because you will lose your work the next time you run the command. Custom Domains GitHub Pages includes support for using a Custom Domain for your site. In addition to the steps documented by GitHub, you need to take one additional step so that MkDocs will work with your custom domain. You need to add a CNAME file to the root of your docs_dir . The file must contain a single bare domain or subdomain on a single line (see MkDocs' own CNAME file as an example). You may create the file manually, or use GitHub's web interface to set up the custom domain (under Settings / Custom Domain). If you use the web interface, GitHub will create the CNAME file for you and save it to the root of your \"pages\" branch. So that the file does not get removed the next time you deploy, you need to copy the file to your docs_dir . With the file properly included in your docs_dir , MkDocs will include the file in your built site and push it to your \"pages\" branch each time you run the gh-deploy command. If you are having problems getting a custom domain to work, see GitHub's documentation on Troubleshooting custom domains . Read the Docs Read the Docs offers free documentation hosting. You can import your docs using any major version control system, including Mercurial, Git, Subversion, and Bazaar. Read the Docs supports MkDocs out-of-the-box. Follow the instructions on their site to arrange the files in your repository properly, create an account and point it at your publicly hosted repository. If properly configured, your documentation will update each time you push commits to your public repository. !!! note To benefit from all of the [features] offered by Read the Docs, you will need to use the [Read the Docs theme][theme] which ships with MkDocs. The various themes which may be referenced in Read the Docs' documentation are Sphinx specific themes and will not work with MkDocs. Other Providers Any hosting provider which can serve static files can be used to serve documentation generated by MkDocs. While it would be impossible to document how to upload the docs to every hosting provider out there, the following guidelines should provide some general assistance. When you build your site (using the mkdocs build command), all of the files are written to the directory assigned to the site_dir configuration option (defaults to \"site\" ) in your mkdocs.yaml config file. Generally, you will simply need to copy the contents of that directory to the root directory of your hosting provider's server. Depending on your hosting provider's setup, you may need to use a graphical or command line ftp , ssh or scp client to transfer the files. For example, a typical set of commands from the command line might look something like this: mkdocs build scp -r ./site user@host:/path/to/server/root Of course, you will need to replace user with the username you have with your hosting provider and host with the appropriate domain name. Additionally, you will need to adjust the /path/to/server/root to match the configuration of your hosts' file system. See your host's documentation for specifics. You will likely want to search their documentation for \"ftp\" or \"uploading site\". 404 Pages When MkDocs builds the documentation it will include a 404.html file in the build directory . This file will be automatically used when deploying to GitHub but only on a custom domain. Other web servers may be configured to use it but the feature won't always be available. See the documentation for your server of choice for more information.","title":"Deploying your docs"},{"location":"user-guide/deploying-your-docs/#deploying-your-docs","text":"A basic guide to deploying your docs to various hosting providers","title":"Deploying your docs"},{"location":"user-guide/deploying-your-docs/#github-pages","text":"If you host the source code for a project on GitHub , you can easily use GitHub Pages to host the documentation for your project. There are two basic types of GitHub Pages sites: Project Pages sites, and User and Organization Pages sites. They are nearly identical but have some important differences, which require a different work flow when deploying.","title":"GitHub Pages"},{"location":"user-guide/deploying-your-docs/#project-pages","text":"Project Pages sites are simpler as the site files get deployed to a branch within the project repository ( gh-pages by default). After you checkout the primary working branch (usually master ) of the git repository where you maintain the source documentation for your project, run the following command: mkdocs gh-deploy That's it! Behind the scenes, MkDocs will build your docs and use the ghp-import tool to commit them to the gh-pages branch and push the gh-pages branch to GitHub. Use mkdocs gh-deploy --help to get a full list of options available for the gh-deploy command. Be aware that you will not be able to review the built site before it is pushed to GitHub. Therefore, you may want to verify any changes you make to the docs beforehand by using the build or serve commands and reviewing the built files locally. !!! warning You should never edit files in your pages repository by hand if you're using the `gh-deploy` command because you will lose your work the next time you run the command.","title":"Project Pages"},{"location":"user-guide/deploying-your-docs/#organization-and-user-pages","text":"User and Organization Pages sites are not tied to a specific project, and the site files are deployed to the master branch in a dedicated repository named with the GitHub account name. Therefore, you need working copies of two repositories on our local system. For example, consider the following file structure: my-project/ mkdocs.yml docs/ orgname.github.io/ After making and verifying updates to your project you need to change directories to the orgname.github.io repository and call the mkdocs gh-deploy command from there: cd ../orgname.github.io/ mkdocs gh-deploy --config-file ../my-project/mkdocs.yml --remote-branch master Note that you need to explicitly point to the mkdocs.yml configuration file as it is no longer in the current working directory. You also need to inform the deploy script to commit to the master branch. You may override the default with the remote_branch configuration setting, but if you forget to change directories before running the deploy script, it will commit to the master branch of your project, which you probably don't want. Be aware that you will not be able to review the built site before it is pushed to GitHub. Therefore, you may want to verify any changes you make to the docs beforehand by using the build or serve commands and reviewing the built files locally. !!! warning You should never edit files in your pages repository by hand if you're using the `gh-deploy` command because you will lose your work the next time you run the command.","title":"Organization and User Pages"},{"location":"user-guide/deploying-your-docs/#custom-domains","text":"GitHub Pages includes support for using a Custom Domain for your site. In addition to the steps documented by GitHub, you need to take one additional step so that MkDocs will work with your custom domain. You need to add a CNAME file to the root of your docs_dir . The file must contain a single bare domain or subdomain on a single line (see MkDocs' own CNAME file as an example). You may create the file manually, or use GitHub's web interface to set up the custom domain (under Settings / Custom Domain). If you use the web interface, GitHub will create the CNAME file for you and save it to the root of your \"pages\" branch. So that the file does not get removed the next time you deploy, you need to copy the file to your docs_dir . With the file properly included in your docs_dir , MkDocs will include the file in your built site and push it to your \"pages\" branch each time you run the gh-deploy command. If you are having problems getting a custom domain to work, see GitHub's documentation on Troubleshooting custom domains .","title":"Custom Domains"},{"location":"user-guide/deploying-your-docs/#read-the-docs","text":"Read the Docs offers free documentation hosting. You can import your docs using any major version control system, including Mercurial, Git, Subversion, and Bazaar. Read the Docs supports MkDocs out-of-the-box. Follow the instructions on their site to arrange the files in your repository properly, create an account and point it at your publicly hosted repository. If properly configured, your documentation will update each time you push commits to your public repository. !!! note To benefit from all of the [features] offered by Read the Docs, you will need to use the [Read the Docs theme][theme] which ships with MkDocs. The various themes which may be referenced in Read the Docs' documentation are Sphinx specific themes and will not work with MkDocs.","title":"Read the Docs"},{"location":"user-guide/deploying-your-docs/#other-providers","text":"Any hosting provider which can serve static files can be used to serve documentation generated by MkDocs. While it would be impossible to document how to upload the docs to every hosting provider out there, the following guidelines should provide some general assistance. When you build your site (using the mkdocs build command), all of the files are written to the directory assigned to the site_dir configuration option (defaults to \"site\" ) in your mkdocs.yaml config file. Generally, you will simply need to copy the contents of that directory to the root directory of your hosting provider's server. Depending on your hosting provider's setup, you may need to use a graphical or command line ftp , ssh or scp client to transfer the files. For example, a typical set of commands from the command line might look something like this: mkdocs build scp -r ./site user@host:/path/to/server/root Of course, you will need to replace user with the username you have with your hosting provider and host with the appropriate domain name. Additionally, you will need to adjust the /path/to/server/root to match the configuration of your hosts' file system. See your host's documentation for specifics. You will likely want to search their documentation for \"ftp\" or \"uploading site\".","title":"Other Providers"},{"location":"user-guide/deploying-your-docs/#404-pages","text":"When MkDocs builds the documentation it will include a 404.html file in the build directory . This file will be automatically used when deploying to GitHub but only on a custom domain. Other web servers may be configured to use it but the feature won't always be available. See the documentation for your server of choice for more information.","title":"404 Pages"},{"location":"user-guide/plugins/","text":"Plugins A Guide to installing, using and creating MkDocs Plugins Installing Plugins Before a plugin can be used, it must be installed on the system. If you are using a plugin which comes with MkDocs, then it was installed when you installed MkDocs. However, to install third party plugins, you need to determine the appropriate package name and install it using pip : pip install mkdocs-foo-plugin Once a plugin has been successfully installed, it is ready to use. It just needs to be enabled in the configuration file. Using Plugins The plugins configuration option should contain a list of plugins to use when building the site. Each \"plugin\" must be a string name assigned to the plugin (see the documentation for a given plugin to determine its \"name\"). A plugin listed here must already be installed . plugins: - search Some plugins may provide configuration options of their own. If you would like to set any configuration options, then you can nest a key/value mapping ( option_name: option value ) of any options that a given plugin supports. Note that a colon ( : ) must follow the plugin name and then on a new line the option name and value must be indented and separated by a colon. If you would like to define multiple options for a single plugin, each option must be defined on a separate line. plugins: - search: lang: en foo: bar For information regarding the configuration options available for a given plugin, see that plugin's documentation. For a list of default plugins and how to override them, see the configuration documentation. Developing Plugins Like MkDocs, plugins must be written in Python. It is generally expected that each plugin would be distributed as a separate Python module, although it is possible to define multiple plugins in the same module. At a minimum, a MkDocs Plugin must consist of a BasePlugin subclass and an entry point which points to it. BasePlugin A subclass of mkdocs.plugins.BasePlugin should define the behavior of the plugin. The class generally consists of actions to perform on specific events in the build process as well as a configuration scheme for the plugin. All BasePlugin subclasses contain the following attributes: config_scheme : A tuple of configuration validation instances. Each item must consist of a two item tuple in which the first item is the string name of the configuration option and the second item is an instance of mkdocs.config.config_options.BaseConfigOption or any of its subclasses. For example, the following `config_scheme` defines three configuration options: `foo`, which accepts a string; `bar`, which accepts an integer; and `baz`, which accepts a boolean value. class MyPlugin(mkdocs.plugins.BasePlugin): config_scheme = ( ('foo', mkdocs.config.config_options.Type(mkdocs.utils.string_types, default='a default value')), ('bar', mkdocs.config.config_options.Type(int, default=0)), ('baz', mkdocs.config.config_options.Type(bool, default=True)) ) When the user's configuration is loaded, the above scheme will be used to validate the configuration and fill in any defaults for settings not provided by the user. The validation classes may be any of the classes provided in `mkdocs.config.config_options` or a third party subclass defined in the plugin. Any settings provided by the user which fail validation or are not defined in the `config_scheme` will raise a `mkdocs.config.base.ValidationError`. config : A dictionary of configuration options for the plugin, which is populated by the load_config method after configuration validation has completed. Use this attribute to access options provided by the user. def on_pre_build(self, config): if self.config['bool_option']: # implement \"bool_option\" functionality here... All BasePlugin subclasses contain the following method(s): load_config(options) : Loads configuration from a dictionary of options. Returns a tuple of (errors, warnings) . This method is called by MkDocs during configuration validation and should not need to be called by the plugin. on_<event_name>() : Optional methods which define the behavior for specific events . The plugin should define its behavior within these methods. Replace <event_name> with the actual name of the event. For example, the pre_build event would be defined in the on_pre_build method. Most events accept one positional argument and various keyword arguments. It is generally expected that the positional argument would be modified (or replaced) by the plugin and returned. If nothing is returned (the method returns `None`), then the original, unmodified object is used. The keyword arguments are simply provided to give context and/or supply data which may be used to determine how the positional argument should be modified. It is good practice to accept keyword arguments as `**kwargs`. In the event that additional keywords are provided to an event in a future version of MkDocs, there will be no need to alter your plugin. For example, the following event would add an additional static_template to the theme config: class MyPlugin(BasePlugin): def on_config(self, config, **kwargs): config['theme'].static_templates.add('my_template.html') return config Events There are three kinds of events: Global Events , Page Events and Template Events . Global Events Global events are called once per build at either the beginning or end of the build process. Any changes made in these events will have a global effect on the entire site. on_serve : The serve event is only called when the serve command is used during development. It is passed the Server instance which can be modified before it is activated. For example, additional files or directories could be added to the list of \"watched\" files for auto-reloading. Parameters: : __server:__ `livereload.Server` instance : __config:__ global configuration object Returns: : `livereload.Server` instance on_config : The config event is the first event called on build and is run immediately after the user configuration is loaded and validated. Any alterations to the config should be made here. Parameters: : __config:__ global configuration object Returns: : global configuration object on_pre_build : The pre_build event does not alter any variables. Use this event to call pre-build scripts. Parameters: : __config:__ global configuration object on_files : The files event is called after the files collection is populated from the docs_dir . Use this event to add, remove, or alter files in the collection. Note that Page objects have not yet been associated with the file objects in the collection. Use Page Events to manipulate page specific data. Parameters: : __files:__ global files collection : __config:__ global configuration object Returns: : global files collection on_nav : The nav event is called after the site navigation is created and can be used to alter the site navigation. Parameters: : __nav:__ global navigation object : __config:__ global configuration object : __files:__ global files collection Returns: : global navigation object on_env : The env event is called after the Jinja template environment is created and can be used to alter the Jinja environment. Parameters: : __env:__ global Jinja environment : __config:__ global configuration object : __site_navigation:__ global navigation object Returns: : global Jinja Environment on_post_build : The post_build event does not alter any variables. Use this event to call post-build scripts. Parameters: : __config:__ global configuration object Template Events Template events are called once for each non-page template. Each template event will be called for each template defined in the extra_templates config setting as well as any static_templates defined in the theme. All template events are called after the env event and before any page events . on_pre_template : The pre_template event is called immediately after the subject template is loaded and can be used to alter the content of the template. Parameters: : __template__: the template contents as string : __template_name__: string filename of template : __config:__ global configuration object Returns: : template contents as string on_template_context : The template_context event is called immediately after the context is created for the subject template and can be used to alter the context for that specific template only. Parameters: : __context__: dict of template context variables : __template_name__: string filename of template : __config:__ global configuration object Returns: : dict of template context variables on_post_template : The post_template event is called after the template is rendered, but before it is written to disc and can be used to alter the output of the template. If an empty string is returned, the template is skipped and nothing is is written to disc. Parameters: : __output_content__: output of rendered template as string : __template_name__: string filename of template : __config:__ global configuration object Returns: : output of rendered template as string Page Events Page events are called once for each Markdown page included in the site. All page events are called after the post_template event and before the post_build event. on_pre_page : The pre_page event is called before any actions are taken on the subject page and can be used to alter the Page instance. Parameters: : __page:__ `mkdocs.nav.Page` instance : __config:__ global configuration object : __site_navigation:__ global navigation object Returns: : `mkdocs.nav.Page` instance on_page_read_source : The on_page_read_source event can replace the default mechanism to read the contents of a page's source from the filesystem. Parameters: : __page:__ `mkdocs.nav.Page` instance : __config:__ global configuration object Returns: : The raw source for a page as unicode string. If `None` is returned, the default loading from a file will be performed. on_page_markdown : The page_markdown event is called after the page's markdown is loaded from file and can be used to alter the Markdown source text. The meta- data has been stripped off and is available as page.meta at this point. Parameters: : __markdown:__ Markdown source text of page as string : __page:__ `mkdocs.nav.Page` instance : __config:__ global configuration object : __site_navigation:__ global navigation object Returns: : Markdown source text of page as string on_page_content : The page_content event is called after the Markdown text is rendered to HTML (but before being passed to a template) and can be used to alter the HTML body of the page. Parameters: : __html:__ HTML rendered from Markdown source as string : __page:__ `mkdocs.nav.Page` instance : __config:__ global configuration object : __site_navigation:__ global navigation object Returns: : HTML rendered from Markdown source as string on_page_context : The page_context event is called after the context for a page is created and can be used to alter the context for that specific page only. Parameters: : __context__: dict of template context variables : __page:__ `mkdocs.nav.Page` instance : __config:__ global configuration object : __site_navigation:__ global navigation object Returns: : dict of template context variables on_post_page : The post_template event is called after the template is rendered, but before it is written to disc and can be used to alter the output of the page. If an empty string is returned, the page is skipped and nothing is written to disc. Parameters: : __output_content:__ output of rendered template as string : __page:__ `mkdocs.nav.Page` instance : __config:__ global configuration object : __site_navigation:__ global navigation object Returns: : output of rendered template as string Entry Point Plugins need to be packaged as Python libraries (distributed on PyPI separate from MkDocs) and each must register as a Plugin via a setuptools entry_point. Add the following to your setup.py script: entry_points={ 'mkdocs.plugins': [ 'pluginname = path.to.some_plugin:SomePluginClass', ] } The pluginname would be the name used by users (in the config file) and path.to.some_plugin:SomePluginClass would be the importable plugin itself ( from path.to.some_plugin import SomePluginClass ) where SomePluginClass is a subclass of BasePlugin which defines the plugin behavior. Naturally, multiple Plugin classes could exist in the same module. Simply define each as a separate entry_point. entry_points={ 'mkdocs.plugins': [ 'featureA = path.to.my_plugins:PluginA', 'featureB = path.to.my_plugins:PluginB' ] } Note that registering a plugin does not activate it. The user still needs to tell MkDocs to use if via the config.","title":"Plugins"},{"location":"user-guide/plugins/#plugins","text":"A Guide to installing, using and creating MkDocs Plugins","title":"Plugins"},{"location":"user-guide/plugins/#installing-plugins","text":"Before a plugin can be used, it must be installed on the system. If you are using a plugin which comes with MkDocs, then it was installed when you installed MkDocs. However, to install third party plugins, you need to determine the appropriate package name and install it using pip : pip install mkdocs-foo-plugin Once a plugin has been successfully installed, it is ready to use. It just needs to be enabled in the configuration file.","title":"Installing Plugins"},{"location":"user-guide/plugins/#using-plugins","text":"The plugins configuration option should contain a list of plugins to use when building the site. Each \"plugin\" must be a string name assigned to the plugin (see the documentation for a given plugin to determine its \"name\"). A plugin listed here must already be installed . plugins: - search Some plugins may provide configuration options of their own. If you would like to set any configuration options, then you can nest a key/value mapping ( option_name: option value ) of any options that a given plugin supports. Note that a colon ( : ) must follow the plugin name and then on a new line the option name and value must be indented and separated by a colon. If you would like to define multiple options for a single plugin, each option must be defined on a separate line. plugins: - search: lang: en foo: bar For information regarding the configuration options available for a given plugin, see that plugin's documentation. For a list of default plugins and how to override them, see the configuration documentation.","title":"Using Plugins"},{"location":"user-guide/plugins/#developing-plugins","text":"Like MkDocs, plugins must be written in Python. It is generally expected that each plugin would be distributed as a separate Python module, although it is possible to define multiple plugins in the same module. At a minimum, a MkDocs Plugin must consist of a BasePlugin subclass and an entry point which points to it.","title":"Developing Plugins"},{"location":"user-guide/plugins/#baseplugin","text":"A subclass of mkdocs.plugins.BasePlugin should define the behavior of the plugin. The class generally consists of actions to perform on specific events in the build process as well as a configuration scheme for the plugin. All BasePlugin subclasses contain the following attributes:","title":"BasePlugin"},{"location":"user-guide/plugins/#config_scheme","text":": A tuple of configuration validation instances. Each item must consist of a two item tuple in which the first item is the string name of the configuration option and the second item is an instance of mkdocs.config.config_options.BaseConfigOption or any of its subclasses. For example, the following `config_scheme` defines three configuration options: `foo`, which accepts a string; `bar`, which accepts an integer; and `baz`, which accepts a boolean value. class MyPlugin(mkdocs.plugins.BasePlugin): config_scheme = ( ('foo', mkdocs.config.config_options.Type(mkdocs.utils.string_types, default='a default value')), ('bar', mkdocs.config.config_options.Type(int, default=0)), ('baz', mkdocs.config.config_options.Type(bool, default=True)) ) When the user's configuration is loaded, the above scheme will be used to validate the configuration and fill in any defaults for settings not provided by the user. The validation classes may be any of the classes provided in `mkdocs.config.config_options` or a third party subclass defined in the plugin. Any settings provided by the user which fail validation or are not defined in the `config_scheme` will raise a `mkdocs.config.base.ValidationError`.","title":"config_scheme"},{"location":"user-guide/plugins/#config","text":": A dictionary of configuration options for the plugin, which is populated by the load_config method after configuration validation has completed. Use this attribute to access options provided by the user. def on_pre_build(self, config): if self.config['bool_option']: # implement \"bool_option\" functionality here... All BasePlugin subclasses contain the following method(s):","title":"config"},{"location":"user-guide/plugins/#load_configoptions","text":": Loads configuration from a dictionary of options. Returns a tuple of (errors, warnings) . This method is called by MkDocs during configuration validation and should not need to be called by the plugin.","title":"load_config(options)"},{"location":"user-guide/plugins/#on_event_name","text":": Optional methods which define the behavior for specific events . The plugin should define its behavior within these methods. Replace <event_name> with the actual name of the event. For example, the pre_build event would be defined in the on_pre_build method. Most events accept one positional argument and various keyword arguments. It is generally expected that the positional argument would be modified (or replaced) by the plugin and returned. If nothing is returned (the method returns `None`), then the original, unmodified object is used. The keyword arguments are simply provided to give context and/or supply data which may be used to determine how the positional argument should be modified. It is good practice to accept keyword arguments as `**kwargs`. In the event that additional keywords are provided to an event in a future version of MkDocs, there will be no need to alter your plugin. For example, the following event would add an additional static_template to the theme config: class MyPlugin(BasePlugin): def on_config(self, config, **kwargs): config['theme'].static_templates.add('my_template.html') return config","title":"on_&lt;event_name&gt;()"},{"location":"user-guide/plugins/#events","text":"There are three kinds of events: Global Events , Page Events and Template Events .","title":"Events"},{"location":"user-guide/plugins/#global-events","text":"Global events are called once per build at either the beginning or end of the build process. Any changes made in these events will have a global effect on the entire site.","title":"Global Events"},{"location":"user-guide/plugins/#on_serve","text":": The serve event is only called when the serve command is used during development. It is passed the Server instance which can be modified before it is activated. For example, additional files or directories could be added to the list of \"watched\" files for auto-reloading. Parameters: : __server:__ `livereload.Server` instance : __config:__ global configuration object Returns: : `livereload.Server` instance","title":"on_serve"},{"location":"user-guide/plugins/#on_config","text":": The config event is the first event called on build and is run immediately after the user configuration is loaded and validated. Any alterations to the config should be made here. Parameters: : __config:__ global configuration object Returns: : global configuration object","title":"on_config"},{"location":"user-guide/plugins/#on_pre_build","text":": The pre_build event does not alter any variables. Use this event to call pre-build scripts. Parameters: : __config:__ global configuration object","title":"on_pre_build"},{"location":"user-guide/plugins/#on_files","text":": The files event is called after the files collection is populated from the docs_dir . Use this event to add, remove, or alter files in the collection. Note that Page objects have not yet been associated with the file objects in the collection. Use Page Events to manipulate page specific data. Parameters: : __files:__ global files collection : __config:__ global configuration object Returns: : global files collection","title":"on_files"},{"location":"user-guide/plugins/#on_nav","text":": The nav event is called after the site navigation is created and can be used to alter the site navigation. Parameters: : __nav:__ global navigation object : __config:__ global configuration object : __files:__ global files collection Returns: : global navigation object","title":"on_nav"},{"location":"user-guide/plugins/#on_env","text":": The env event is called after the Jinja template environment is created and can be used to alter the Jinja environment. Parameters: : __env:__ global Jinja environment : __config:__ global configuration object : __site_navigation:__ global navigation object Returns: : global Jinja Environment","title":"on_env"},{"location":"user-guide/plugins/#on_post_build","text":": The post_build event does not alter any variables. Use this event to call post-build scripts. Parameters: : __config:__ global configuration object","title":"on_post_build"},{"location":"user-guide/plugins/#template-events","text":"Template events are called once for each non-page template. Each template event will be called for each template defined in the extra_templates config setting as well as any static_templates defined in the theme. All template events are called after the env event and before any page events .","title":"Template Events"},{"location":"user-guide/plugins/#on_pre_template","text":": The pre_template event is called immediately after the subject template is loaded and can be used to alter the content of the template. Parameters: : __template__: the template contents as string : __template_name__: string filename of template : __config:__ global configuration object Returns: : template contents as string","title":"on_pre_template"},{"location":"user-guide/plugins/#on_template_context","text":": The template_context event is called immediately after the context is created for the subject template and can be used to alter the context for that specific template only. Parameters: : __context__: dict of template context variables : __template_name__: string filename of template : __config:__ global configuration object Returns: : dict of template context variables","title":"on_template_context"},{"location":"user-guide/plugins/#on_post_template","text":": The post_template event is called after the template is rendered, but before it is written to disc and can be used to alter the output of the template. If an empty string is returned, the template is skipped and nothing is is written to disc. Parameters: : __output_content__: output of rendered template as string : __template_name__: string filename of template : __config:__ global configuration object Returns: : output of rendered template as string","title":"on_post_template"},{"location":"user-guide/plugins/#page-events","text":"Page events are called once for each Markdown page included in the site. All page events are called after the post_template event and before the post_build event.","title":"Page Events"},{"location":"user-guide/plugins/#on_pre_page","text":": The pre_page event is called before any actions are taken on the subject page and can be used to alter the Page instance. Parameters: : __page:__ `mkdocs.nav.Page` instance : __config:__ global configuration object : __site_navigation:__ global navigation object Returns: : `mkdocs.nav.Page` instance","title":"on_pre_page"},{"location":"user-guide/plugins/#on_page_read_source","text":": The on_page_read_source event can replace the default mechanism to read the contents of a page's source from the filesystem. Parameters: : __page:__ `mkdocs.nav.Page` instance : __config:__ global configuration object Returns: : The raw source for a page as unicode string. If `None` is returned, the default loading from a file will be performed.","title":"on_page_read_source"},{"location":"user-guide/plugins/#on_page_markdown","text":": The page_markdown event is called after the page's markdown is loaded from file and can be used to alter the Markdown source text. The meta- data has been stripped off and is available as page.meta at this point. Parameters: : __markdown:__ Markdown source text of page as string : __page:__ `mkdocs.nav.Page` instance : __config:__ global configuration object : __site_navigation:__ global navigation object Returns: : Markdown source text of page as string","title":"on_page_markdown"},{"location":"user-guide/plugins/#on_page_content","text":": The page_content event is called after the Markdown text is rendered to HTML (but before being passed to a template) and can be used to alter the HTML body of the page. Parameters: : __html:__ HTML rendered from Markdown source as string : __page:__ `mkdocs.nav.Page` instance : __config:__ global configuration object : __site_navigation:__ global navigation object Returns: : HTML rendered from Markdown source as string","title":"on_page_content"},{"location":"user-guide/plugins/#on_page_context","text":": The page_context event is called after the context for a page is created and can be used to alter the context for that specific page only. Parameters: : __context__: dict of template context variables : __page:__ `mkdocs.nav.Page` instance : __config:__ global configuration object : __site_navigation:__ global navigation object Returns: : dict of template context variables","title":"on_page_context"},{"location":"user-guide/plugins/#on_post_page","text":": The post_template event is called after the template is rendered, but before it is written to disc and can be used to alter the output of the page. If an empty string is returned, the page is skipped and nothing is written to disc. Parameters: : __output_content:__ output of rendered template as string : __page:__ `mkdocs.nav.Page` instance : __config:__ global configuration object : __site_navigation:__ global navigation object Returns: : output of rendered template as string","title":"on_post_page"},{"location":"user-guide/plugins/#entry-point","text":"Plugins need to be packaged as Python libraries (distributed on PyPI separate from MkDocs) and each must register as a Plugin via a setuptools entry_point. Add the following to your setup.py script: entry_points={ 'mkdocs.plugins': [ 'pluginname = path.to.some_plugin:SomePluginClass', ] } The pluginname would be the name used by users (in the config file) and path.to.some_plugin:SomePluginClass would be the importable plugin itself ( from path.to.some_plugin import SomePluginClass ) where SomePluginClass is a subclass of BasePlugin which defines the plugin behavior. Naturally, multiple Plugin classes could exist in the same module. Simply define each as a separate entry_point. entry_points={ 'mkdocs.plugins': [ 'featureA = path.to.my_plugins:PluginA', 'featureB = path.to.my_plugins:PluginB' ] } Note that registering a plugin does not activate it. The user still needs to tell MkDocs to use if via the config.","title":"Entry Point"},{"location":"user-guide/section1/","text":"Intro to Computational Intelligence Computational intelligence techniques are fast-growing and promising research topics that have drawn a great deal of attention from researchers for many years. Slide See the following slide . Video See the following video:","title":"Section 1"},{"location":"user-guide/section1/#intro-to-computational-intelligence","text":"Computational intelligence techniques are fast-growing and promising research topics that have drawn a great deal of attention from researchers for many years.","title":"Intro to Computational Intelligence"},{"location":"user-guide/section1/#slide","text":"See the following slide .","title":"Slide"},{"location":"user-guide/section1/#video","text":"See the following video:","title":"Video"},{"location":"user-guide/section10/","text":"Will be available soon ...","title":"Section 10"},{"location":"user-guide/section10/#will-be-available-soon","text":"","title":"Will be available soon ..."},{"location":"user-guide/section11/","text":"Will be available soon ...","title":"Section 11"},{"location":"user-guide/section11/#will-be-available-soon","text":"","title":"Will be available soon ..."},{"location":"user-guide/section12/","text":"Will be available soon ...","title":"Section 12"},{"location":"user-guide/section12/#will-be-available-soon","text":"","title":"Will be available soon ..."},{"location":"user-guide/section13/","text":"Will be available soon ...","title":"Section 13"},{"location":"user-guide/section13/#will-be-available-soon","text":"","title":"Will be available soon ..."},{"location":"user-guide/section14/","text":"Will be available soon ...","title":"Section 14"},{"location":"user-guide/section14/#will-be-available-soon","text":"","title":"Will be available soon ..."},{"location":"user-guide/section15/","text":"Will be available soon ...","title":"Section 15"},{"location":"user-guide/section15/#will-be-available-soon","text":"","title":"Will be available soon ..."},{"location":"user-guide/section16/","text":"Will be available soon ...","title":"Section 16"},{"location":"user-guide/section16/#will-be-available-soon","text":"","title":"Will be available soon ..."},{"location":"user-guide/section2/","text":"Neural Network Basic Computational intelligence techniques are fast-growing and promising research topics that have drawn a great deal of attention from researchers for many years. Video See the following video:","title":"Section 2"},{"location":"user-guide/section2/#neural-network-basic","text":"Computational intelligence techniques are fast-growing and promising research topics that have drawn a great deal of attention from researchers for many years.","title":"Neural Network Basic"},{"location":"user-guide/section2/#video","text":"See the following video:","title":"Video"},{"location":"user-guide/section3/","text":"Fuzzy Fuzzy logic is a form of many-valued logic in which the truth value of variables may be any real number between 0 and 1. It is employed to handle the concept of partial truth, where the truth value may range between completely true and completely false. By contrast, in Boolean logic, the truth values of variables may only be the integer values 0 or 1. Video See the following video:","title":"Section 3"},{"location":"user-guide/section3/#fuzzy","text":"Fuzzy logic is a form of many-valued logic in which the truth value of variables may be any real number between 0 and 1. It is employed to handle the concept of partial truth, where the truth value may range between completely true and completely false. By contrast, in Boolean logic, the truth values of variables may only be the integer values 0 or 1.","title":"Fuzzy"},{"location":"user-guide/section3/#video","text":"See the following video:","title":"Video"},{"location":"user-guide/section4/","text":"Support Vector Machine Support vector machines (SVMs) have attracted a significant amount of attention in the field of machine learning over the past decade by proving themselves to be very effective in a variety of real-world pattern classification and regression tasks. In the literature, they have been successfully applied to many problems ranging from face recognition, to bioinformatics and hand-written character recognition (amongst many others). In this section we will try to use it in Python. Video See the following video:","title":"Section 4"},{"location":"user-guide/section4/#support-vector-machine","text":"Support vector machines (SVMs) have attracted a significant amount of attention in the field of machine learning over the past decade by proving themselves to be very effective in a variety of real-world pattern classification and regression tasks. In the literature, they have been successfully applied to many problems ranging from face recognition, to bioinformatics and hand-written character recognition (amongst many others). In this section we will try to use it in Python.","title":"Support Vector Machine"},{"location":"user-guide/section4/#video","text":"See the following video:","title":"Video"},{"location":"user-guide/section5/","text":"Will be available soon ...","title":"Section 5"},{"location":"user-guide/section5/#will-be-available-soon","text":"","title":"Will be available soon ..."},{"location":"user-guide/section7/","text":"Will be available soon ...","title":"Section 7"},{"location":"user-guide/section7/#will-be-available-soon","text":"","title":"Will be available soon ..."},{"location":"user-guide/section8/","text":"Will be available soon ...","title":"Section 8"},{"location":"user-guide/section8/#will-be-available-soon","text":"","title":"Will be available soon ..."},{"location":"user-guide/section9/","text":"Will be available soon ...","title":"Section 9"},{"location":"user-guide/section9/#will-be-available-soon","text":"","title":"Will be available soon ..."},{"location":"user-guide/styling-your-docs/","text":"Styling your docs How to style and theme your documentation. MkDocs includes a couple built-in themes as well as various third party themes , all of which can easily be customized with extra CSS or JavaScript or overridden from the theme's custom_dir . You can also create your own custom theme from the ground up for your documentation. To use a theme that is included in MkDocs, simply add this to your mkdocs.yml config file. theme: readthedocs Replace readthedocs with any of the built-in themes listed below. To create a new custom theme see the Custom Themes page, or to more heavily customize an existing theme, see the Customizing a Theme section below. Built-in themes mkdocs The default theme, which was built as a custom Bootstrap theme, supports most every feature of MkDocs. It only officially supports two levels in the navigation (see #1107). In addition to the default theme configuration options , the mkdocs theme supports the following options: highlightjs : Enables highlighting of source code in code blocks using the highlight.js JavaScript library. Default: True . hljs_style : The highlight.js library provides 79 different styles (color variations) for highlighting source code in code blocks. Set this to the name of the desired style. Default: github . hljs_languages : By default, highlight.js only supports 23 common languages. List additional languages here to include support for them. theme: name: mkdocs highlightjs: true hljs_languages: - yaml - rust shortcuts : Defines keyboard shortcut keys. theme: name: mkdocs shortcuts: help: 191 # ? next: 78 # n previous: 80 # p search: 83 # s All values much be numeric key codes. It is best to use keys which are available on all keyboards. You may use http://keycode.info/ to determine the key code for a given key. help : Display a help modal which lists the keyboard shortcuts. Default: 191 (?) next : Navigate to the \"next\" page. Default: 78 (n) previous : Navigate to the \"previous\" page. Default: 80 (p) search : Display the search modal. Default: 83 (s) readthedocs A clone of the default theme used by the Read the Docs service, which offers the same restricted feature-set as its parent theme. Like its parent theme, only two levels of navigation are supported. In addition to the default theme configuration options , the readthedocs theme supports the following options: highlightjs : Enables highlighting of source code in code blocks using the highlight.js JavaScript library. Default: True . hljs_languages : By default, highlight.js only supports 23 common languages. List additional languages here to include support for them. theme: name: readthedocs highlightjs: true hljs_languages: - yaml - rust Third Party Themes A list of third party themes can be found in the MkDocs community wiki . If you have created your own, please feel free to add it to the list. Customizing a Theme If you would like to make a few tweaks to an existing theme, there is no need to create your own theme from scratch. For minor tweaks which only require some CSS and/or JavaScript, you can use the docs_dir . However, for more complex customizations, including overriding templates, you will need to use the theme custom_dir setting. Using the docs_dir The extra_css and extra_javascript configuration options can be used to make tweaks and customizations to existing themes. To use these, you simply need to include either CSS or JavaScript files within your documentation directory . For example, to change the colour of the headers in your documentation, create a file called extra.css and place it next to the documentation Markdown. In that file add the following CSS. h1 { color: red; } !!! note If you are deploying your documentation with [ReadTheDocs]. You will need to explicitly list the CSS and JavaScript files you want to include in your config. To do this, add the following to your mkdocs.yml. extra_css: [extra.css] After making these changes, they should be visible when you run mkdocs serve - if you already had this running, you should see that the CSS changes were automatically picked up and the documentation will be updated. !!! note Any extra CSS or JavaScript files will be added to the generated HTML document after the page content. If you desire to include a JavaScript library, you may have better success including the library by using the theme [custom_dir]. Using the theme custom_dir The theme. custom_dir configuration option can be used to point to a directory of files which override the files in a parent theme. The parent theme would be the theme defined in the theme. name configuration option. Any file in the custom_dir with the same name as a file in the parent theme will replace the file of the same name in the parent theme. Any additional files in the custom_dir will be added to the parent theme. The contents of the custom_dir should mirror the directory structure of the parent theme. You may include templates, JavaScript files, CSS files, images, fonts, or any other media included in a theme. !!! Note For this to work, the theme `name` setting must be set to a known installed theme. If the `name` setting is instead set to `null` (or not defined), then there is no theme to override and the contents of the `custom_dir` must be a complete, standalone theme. See [Custom Themes][custom theme] for more information. For example, the mkdocs theme ( browse source ), contains the following directory structure (in part): - css\\ - fonts\\ - img\\ - favicon.ico - grid.png - js\\ - 404.html - base.html - content.html - nav-sub.html - nav.html - toc.html To override any of the files contained in that theme, create a new directory next to your docs_dir : mkdir custom_theme And then point your mkdocs.yml configuration file at the new directory: theme: name: mkdocs custom_dir: custom_theme/ To override the 404 error page (\"file not found\"), add a new template file named 404.html to the custom_theme directory. For information on what can be included in a template, review the documentation for building a custom theme . To override the favicon, you can add a new icon file at custom_theme/img/favicon.ico . To include a JavaScript library, copy the library to the custom_theme/js/ directory. Your directory structure should now look like this: - docs/ - index.html - custom_theme/ - img/ - favicon.ico - js/ - somelib.js - 404.html - config.yml !!! Note Any files included in the parent theme (defined in `name`) but not included in the `custom_dir` will still be utilized. The `custom_dir` will only override/replace files in the parent theme. If you want to remove files, or build a theme from scratch, then you should review the documentation for building a [custom theme]. Overriding Template Blocks The built-in themes implement many of their parts inside template blocks which can be individually overridden in the main.html template. Simply create a main.html template file in your custom_dir and define replacement blocks within that file. Just make sure that the main.html extends base.html . For example, to alter the title of the MkDocs theme, your replacement main.html template would contain the following: {% extends \"base.html\" %} {% block title %} <title>Custom title goes here</title> {% endblock %} In the above example, the title block defined in your custom main.html file will be used in place of the default title block defined in the parent theme. You may re-define as many blocks as you desire, as long as those blocks are defined in the parent. For example, you could replace the Google Analytics script with one for a different service or replace the search feature with your own. You will need to consult the parent theme you are using to determine what blocks are available to override. The MkDocs and ReadTheDocs themes provide the following blocks: site_meta : Contains meta tags in the document head. htmltitle : Contains the page title in the document head. styles : Contains the link tags for stylesheets. libs : Contains the JavaScript libraries (jQuery, etc) included in the page header. scripts : Contains JavaScript scripts which should execute after a page loads. analytics : Contains the analytics script. extrahead : An empty block in the <head> to insert custom tags/scripts/etc. site_name : Contains the site name in the navigation bar. site_nav : Contains the site navigation in the navigation bar. search_box : Contains the search box in the navigation bar. next_prev : Contains the next and previous buttons in the navigation bar. repo : Contains the repository link in the navigation bar. content : Contains the page content and table of contents for the page. footer : Contains the page footer. You may need to view the source template files to ensure your modifications will work with the structure of the site. See Template Variables for a list of variables you can use within your custom blocks. For a more complete explanation of blocks, consult the Jinja documentation . Combining the custom_dir and Template Blocks Adding a JavaScript library to the custom_dir will make it available, but won't include it in the pages generated by MkDocs. Therefore, a link needs to be added to the library from the HTML. Starting the with directory structure above (truncated): - docs/ - custom_theme/ - js/ - somelib.js - config.yml A link to the custom_theme/js/somelib.js file needs to be added to the template. As somelib.js is a JavaScript library, it would logically go in the libs block. However, a new libs block that only includes the new script will replace the block defined in the parent template and any links to libraries in the parent template will be removed. To avoid breaking the template, a super block can be used with a call to super from within the block: {% extends \"base.html\" %} {% block libs %} {{ super() }} <script src=\"{{ base_url }}/js/somelib.js\"></script> {% endblock %} Note that the base_url template variable was used to ensure that the link is always relative to the current page. Now the generated pages will include links to the template provided libraries as well as the library included in the custom_dir . The same would be required for any additional CSS files included in the custom_dir .","title":"Styling your docs"},{"location":"user-guide/styling-your-docs/#styling-your-docs","text":"How to style and theme your documentation. MkDocs includes a couple built-in themes as well as various third party themes , all of which can easily be customized with extra CSS or JavaScript or overridden from the theme's custom_dir . You can also create your own custom theme from the ground up for your documentation. To use a theme that is included in MkDocs, simply add this to your mkdocs.yml config file. theme: readthedocs Replace readthedocs with any of the built-in themes listed below. To create a new custom theme see the Custom Themes page, or to more heavily customize an existing theme, see the Customizing a Theme section below.","title":"Styling your docs"},{"location":"user-guide/styling-your-docs/#built-in-themes","text":"","title":"Built-in themes"},{"location":"user-guide/styling-your-docs/#mkdocs","text":"The default theme, which was built as a custom Bootstrap theme, supports most every feature of MkDocs. It only officially supports two levels in the navigation (see #1107). In addition to the default theme configuration options , the mkdocs theme supports the following options: highlightjs : Enables highlighting of source code in code blocks using the highlight.js JavaScript library. Default: True . hljs_style : The highlight.js library provides 79 different styles (color variations) for highlighting source code in code blocks. Set this to the name of the desired style. Default: github . hljs_languages : By default, highlight.js only supports 23 common languages. List additional languages here to include support for them. theme: name: mkdocs highlightjs: true hljs_languages: - yaml - rust shortcuts : Defines keyboard shortcut keys. theme: name: mkdocs shortcuts: help: 191 # ? next: 78 # n previous: 80 # p search: 83 # s All values much be numeric key codes. It is best to use keys which are available on all keyboards. You may use http://keycode.info/ to determine the key code for a given key. help : Display a help modal which lists the keyboard shortcuts. Default: 191 (?) next : Navigate to the \"next\" page. Default: 78 (n) previous : Navigate to the \"previous\" page. Default: 80 (p) search : Display the search modal. Default: 83 (s)","title":"mkdocs"},{"location":"user-guide/styling-your-docs/#readthedocs","text":"A clone of the default theme used by the Read the Docs service, which offers the same restricted feature-set as its parent theme. Like its parent theme, only two levels of navigation are supported. In addition to the default theme configuration options , the readthedocs theme supports the following options: highlightjs : Enables highlighting of source code in code blocks using the highlight.js JavaScript library. Default: True . hljs_languages : By default, highlight.js only supports 23 common languages. List additional languages here to include support for them. theme: name: readthedocs highlightjs: true hljs_languages: - yaml - rust","title":"readthedocs"},{"location":"user-guide/styling-your-docs/#third-party-themes","text":"A list of third party themes can be found in the MkDocs community wiki . If you have created your own, please feel free to add it to the list.","title":"Third Party Themes"},{"location":"user-guide/styling-your-docs/#customizing-a-theme","text":"If you would like to make a few tweaks to an existing theme, there is no need to create your own theme from scratch. For minor tweaks which only require some CSS and/or JavaScript, you can use the docs_dir . However, for more complex customizations, including overriding templates, you will need to use the theme custom_dir setting.","title":"Customizing a Theme"},{"location":"user-guide/styling-your-docs/#using-the-docs_dir","text":"The extra_css and extra_javascript configuration options can be used to make tweaks and customizations to existing themes. To use these, you simply need to include either CSS or JavaScript files within your documentation directory . For example, to change the colour of the headers in your documentation, create a file called extra.css and place it next to the documentation Markdown. In that file add the following CSS. h1 { color: red; } !!! note If you are deploying your documentation with [ReadTheDocs]. You will need to explicitly list the CSS and JavaScript files you want to include in your config. To do this, add the following to your mkdocs.yml. extra_css: [extra.css] After making these changes, they should be visible when you run mkdocs serve - if you already had this running, you should see that the CSS changes were automatically picked up and the documentation will be updated. !!! note Any extra CSS or JavaScript files will be added to the generated HTML document after the page content. If you desire to include a JavaScript library, you may have better success including the library by using the theme [custom_dir].","title":"Using the docs_dir"},{"location":"user-guide/styling-your-docs/#using-the-theme-custom_dir","text":"The theme. custom_dir configuration option can be used to point to a directory of files which override the files in a parent theme. The parent theme would be the theme defined in the theme. name configuration option. Any file in the custom_dir with the same name as a file in the parent theme will replace the file of the same name in the parent theme. Any additional files in the custom_dir will be added to the parent theme. The contents of the custom_dir should mirror the directory structure of the parent theme. You may include templates, JavaScript files, CSS files, images, fonts, or any other media included in a theme. !!! Note For this to work, the theme `name` setting must be set to a known installed theme. If the `name` setting is instead set to `null` (or not defined), then there is no theme to override and the contents of the `custom_dir` must be a complete, standalone theme. See [Custom Themes][custom theme] for more information. For example, the mkdocs theme ( browse source ), contains the following directory structure (in part): - css\\ - fonts\\ - img\\ - favicon.ico - grid.png - js\\ - 404.html - base.html - content.html - nav-sub.html - nav.html - toc.html To override any of the files contained in that theme, create a new directory next to your docs_dir : mkdir custom_theme And then point your mkdocs.yml configuration file at the new directory: theme: name: mkdocs custom_dir: custom_theme/ To override the 404 error page (\"file not found\"), add a new template file named 404.html to the custom_theme directory. For information on what can be included in a template, review the documentation for building a custom theme . To override the favicon, you can add a new icon file at custom_theme/img/favicon.ico . To include a JavaScript library, copy the library to the custom_theme/js/ directory. Your directory structure should now look like this: - docs/ - index.html - custom_theme/ - img/ - favicon.ico - js/ - somelib.js - 404.html - config.yml !!! Note Any files included in the parent theme (defined in `name`) but not included in the `custom_dir` will still be utilized. The `custom_dir` will only override/replace files in the parent theme. If you want to remove files, or build a theme from scratch, then you should review the documentation for building a [custom theme].","title":"Using the theme custom_dir"},{"location":"user-guide/styling-your-docs/#overriding-template-blocks","text":"The built-in themes implement many of their parts inside template blocks which can be individually overridden in the main.html template. Simply create a main.html template file in your custom_dir and define replacement blocks within that file. Just make sure that the main.html extends base.html . For example, to alter the title of the MkDocs theme, your replacement main.html template would contain the following: {% extends \"base.html\" %} {% block title %} <title>Custom title goes here</title> {% endblock %} In the above example, the title block defined in your custom main.html file will be used in place of the default title block defined in the parent theme. You may re-define as many blocks as you desire, as long as those blocks are defined in the parent. For example, you could replace the Google Analytics script with one for a different service or replace the search feature with your own. You will need to consult the parent theme you are using to determine what blocks are available to override. The MkDocs and ReadTheDocs themes provide the following blocks: site_meta : Contains meta tags in the document head. htmltitle : Contains the page title in the document head. styles : Contains the link tags for stylesheets. libs : Contains the JavaScript libraries (jQuery, etc) included in the page header. scripts : Contains JavaScript scripts which should execute after a page loads. analytics : Contains the analytics script. extrahead : An empty block in the <head> to insert custom tags/scripts/etc. site_name : Contains the site name in the navigation bar. site_nav : Contains the site navigation in the navigation bar. search_box : Contains the search box in the navigation bar. next_prev : Contains the next and previous buttons in the navigation bar. repo : Contains the repository link in the navigation bar. content : Contains the page content and table of contents for the page. footer : Contains the page footer. You may need to view the source template files to ensure your modifications will work with the structure of the site. See Template Variables for a list of variables you can use within your custom blocks. For a more complete explanation of blocks, consult the Jinja documentation .","title":"Overriding Template Blocks"},{"location":"user-guide/styling-your-docs/#combining-the-custom_dir-and-template-blocks","text":"Adding a JavaScript library to the custom_dir will make it available, but won't include it in the pages generated by MkDocs. Therefore, a link needs to be added to the library from the HTML. Starting the with directory structure above (truncated): - docs/ - custom_theme/ - js/ - somelib.js - config.yml A link to the custom_theme/js/somelib.js file needs to be added to the template. As somelib.js is a JavaScript library, it would logically go in the libs block. However, a new libs block that only includes the new script will replace the block defined in the parent template and any links to libraries in the parent template will be removed. To avoid breaking the template, a super block can be used with a call to super from within the block: {% extends \"base.html\" %} {% block libs %} {{ super() }} <script src=\"{{ base_url }}/js/somelib.js\"></script> {% endblock %} Note that the base_url template variable was used to ensure that the link is always relative to the current page. Now the generated pages will include links to the template provided libraries as well as the library included in the custom_dir . The same would be required for any additional CSS files included in the custom_dir .","title":"Combining the custom_dir and Template Blocks"},{"location":"user-guide/writing-your-docs/","text":"Writing your docs How to layout and write your Markdown source files. File layout Your documentation source should be written as regular Markdown files (see Writing with Markdown below), and placed in the documentation directory . By default, this directory will be named docs and will exist at the top level of your project, alongside the mkdocs.yml configuration file. The simplest project you can create will look something like this: mkdocs.yml docs/ index.md By convention your project homepage should always be named index . Any of the following extensions may be used for your Markdown source files: markdown , mdown , mkdn , mkd , md . All Markdown files included in your documentation directory will be rendered in the built site regardless of any settings. You can also create multi-page documentation, by creating several Markdown files: mkdocs.yml docs/ index.md about.md license.md The file layout you use determines the URLs that are used for the generated pages. Given the above layout, pages would be generated for the following URLs: / /about/ /license/ You can also include your Markdown files in nested directories if that better suits your documentation layout. docs/ index.md user-guide/getting-started.md user-guide/configuration-options.md license.md Source files inside nested directories will cause pages to be generated with nested URLs, like so: / /user-guide/getting-started/ /user-guide/configuration-options/ /license/ Index pages When a directory is requested, by default, most web servers will return an index file (usually named index.html ) contained within that directory if one exists. For that reason, the homepage in all of the examples above has been named index.md , which MkDocs will render to index.html when building the site. Many repository hosting sites provide special treatment for README files by displaying the contents of the README file when browsing the contents of a directory. Therefore, MkDocs will allow you to name your index pages as README.md instead of index.md . In that way, when users are browsing your source code, the repository host can display the index page of that directory as it is a README file. However, when MkDocs renders your site, the file will be renamed to index.html so that the server will serve it as a proper index file. If both an index.md file and a README.md file are found in the same directory, then the index.md file is used and the README.md file is ignored. Configure Pages and Navigation The nav configuration setting in your mkdocs.yml file defines which pages are included in the global site navigation menu as well as the structure of that menu. If not provided, the navigation will be automatically created by discovering all the Markdown files in the documentation directory . An automatically created navigation configuration will always be sorted alphanumerically by file name (except that index files will always be listed first within a sub-section). You will need to manually define your navigation configuration if you would like your navigation menu sorted differently. A simple navigation configuration looks like this: nav: - 'index.md' - 'about.md' All paths in the navigation configuration must be relative to the docs_dir configuration option. If that option is set to the default value, docs , the source files for the above configuration would be located at docs/index.md and docs/about.md . The above example will result in two navigation items being created at the top level and with their titles inferred from the contents of the file (or the filename if no title is defined within the file). To define a custom title for the pages, the title can be added before the filename. nav: - Home: 'index.md' - About: 'about.md' Note that if a title is defined for a page in the navigation, that title will be used throughout the site for that page and will override any title defined within the page itself. Navigation sub-sections can be created by listing related pages together under a section title. For example: nav: - Home: 'index.md' - User Guide: - 'Writing your docs': 'writing-your-docs.md' - 'Styling your docs': 'styling-your-docs.md' - About: - 'License': 'license.md' - 'Release Notes': 'release-notes.md' With the above configuration we have three top level items: \"Home\", \"User Guide\" and \"About.\" \"Home\" is a link to the homepage for the site. Under the \"User Guide\" section two pages are listed: \"Writing your docs\" and \"Styling your docs.\" Under the \"About\" section two more pages are listed: \"License\" and \"Release Notes.\" Note that a section cannot have a page assigned to it. Sections are only containers for child pages and sub-sections. You may nest sections as deeply as you like. However, be careful that you don't make it too difficult for your users to navigate through the site navigation by over-complicating the nesting. While sections may mirror your directly structure, they do not have to. Any pages not listed in your navigation configuration will still be rendered and included with the built site, however, they will not be linked from the global navigation and will not be included in the previous and next links. Such pages will be \"hidden\" unless linked to directly. Writing with Markdown MkDocs pages must be authored in Markdown , a lightweight markup language which results in easy-to-read, easy-to-write plain text documents that can be converted to valid HTML documents in a predictable manner. MkDocs uses the Python-Markdown library to render Markdown documents to HTML. Python-Markdown is almost completely compliant with the reference implementation , although there are a few very minor differences . In addition to the base Markdown syntax which is common across all Markdown implementations, MkDocs includes support for extending the Markdown syntax with Python-Markdown extensions . See the MkDocs' markdown_extensions configuration setting for details on how to enable extensions. MkDocs includes some extensions by default, which are highlighted below. Internal links MkDocs allows you to interlink your documentation by using regular Markdown links . However, there are a few additional benefits to formatting those links specifically for MkDocs as outlined below. Linking to pages When linking between pages in the documentation you can simply use the regular Markdown linking syntax, including the relative path to the Markdown document you wish to link to. Please see the [project license](license.md) for further details. When the MkDocs build runs, these Markdown links will automatically be transformed into an HTML hyperlink to the appropriate HTML page. If the target documentation file is in another directory you'll need to make sure to include any relative directory path in the link. Please see the [project license](../about/license.md) for further details. The toc extension is used by MkDocs to generate an ID for every header in your Markdown documents. You can use that ID to link to a section within a target document by using an anchor link. The generated HTML will correctly transform the path portion of the link, and leave the anchor portion intact. Please see the [project license](about.md#license) for further details. Note that IDs are created from the text of a header. All text is converted to lowercase and any disallowed characters, including white-space, are converted to dashes. Consecutive dashes are then reduced to a single dash. There are a few configuration settings provided by the toc extension which you can set in your mkdocs.yml configuration file to alter the default behavior: permalink : : Generate permanent links at the end of each header. Default: False . When set to True the paragraph symbol (&para; or `&para;`) is used as the link text. When set to a string, the provided string is used as the link text. For example, to use the hash symbol (`#`) instead, do: markdown_extensions: - toc: permalink: \"#\" baselevel : : Base level for headers. Default: 1 . This setting allows the header levels to be automatically adjusted to fit within the hierarchy of your HTML templates. For example, if the Markdown text for a page should not contain any headers higher than level 2 (`<h2>`), do: markdown_extensions: - toc: baselevel: 2 Then any headers in your document would be increased by 1. For example, the header `# Header` would be rendered as a level 2 header (`<h2>`) in the HTML output. separator : : Word separator. Default: - . Character which replaces white-space in generated IDs. If you prefer underscores, then do: markdown_extensions: - toc: separator: \"_\" Note that if you would like to define multiple of the above settings, you must do so under a single toc entry in the markdown_extensions configuration option. markdown_extensions: - toc: permalink: \"#\" baselevel: 2 separator: \"_\" Linking to images and media As well as the Markdown source files, you can also include other file types in your documentation, which will be copied across when generating your documentation site. These might include images and other media. For example, if your project documentation needed to include a GitHub pages CNAME file and a PNG formatted screenshot image then your file layout might look as follows: mkdocs.yml docs/ CNAME index.md about.md license.md img/ screenshot.png To include images in your documentation source files, simply use any of the regular Markdown image syntaxes: Cupcake indexer is a snazzy new project for indexing small cakes. ![Screenshot](img/screenshot.png) *Above: Cupcake indexer in progress* Your image will now be embedded when you build the documentation, and should also be previewed if you're working on the documentation with a Markdown editor. Linking from raw HTML Markdown allows document authors to fall back to raw HTML when the Markdown syntax does not meets the author's needs. MkDocs does not limit Markdown in this regard. However, as all raw HTML is ignored by the Markdown parser, MkDocs is not able to validate or convert links contained in raw HTML. When including internal links within raw HTML, you will need to manually format the link appropriately for the rendered document. Meta-Data MkDocs includes support for both YAML and MultiMarkdown style meta-data (often called front-matter). Meta-data consists of a series of keywords and values defined at the beginning of a Markdown document, which are stripped from the document prior to it being processing by Python-Markdown. The key/value pairs are passed by MkDocs to the page template. Therefore, if a theme includes support, the values of any keys can be displayed on the page or used to control the page rendering. See your theme's documentation for information about which keys may be supported, if any. In addition to displaying information in a template, MkDocs includes support for a few predefined meta-data keys which can alter the behavior of MkDocs for that specific page. The following keys are supported: template : : The template to use with the current page. By default, MkDocs uses the `main.html` template of a theme to render Markdown pages. You can use the `template` meta-data key to define a different template file for that specific page. The template file must be available on the path(s) defined in the theme's environment. title : : The \"title\" to use for the document. MkDocs will attempt to determine the title of a document in the following ways, in order: 1. A title defined in the [nav] configuration setting for a document. 2. A title defined in the `title` meta-data key of a document. 3. A level 1 Markdown header on the first line of the document body. 4. The filename of a document. Upon finding a title for a page, MkDoc does not continue checking any additional sources in the above list. YAML Style Meta-Data YAML style meta-data consists of YAML key/value pairs wrapped in YAML style deliminators to mark the start and/or end of the meta-data. The first line of a document must be --- . The meta-data ends at the first line containing an end deliminator (either --- or ... ). The content between the deliminators is parsed as YAML . --- title: My Document summary: A brief description of my document. authors: - Waylan Limberg - Tom Christie date: 2018-07-10 some_url: https://example.com --- This is the first paragraph of the document. YAML is able to detect data types. Therefore, in the above example, the values of title , summary and some_url are strings, the value of authors is a list of strings and the value of date is a datetime.date object. Note that the YAML keys are case sensitive and MkDocs expects keys to be all lowercase. The top level of the YAML must be a collection of key/value pairs, which results in a Python dict being returned. If any other type is returned or the YAML parser encounters an error, then MkDocs does not recognize the section as meta-data, the page's meta attribute will be empty, and the section is not removed from the document. MultiMarkdown Style Meta-Data MultiMarkdown style meta-data uses a format first introduced by the MultiMarkdown project. The data consists of a series of keywords and values defined at the beginning of a Markdown document, like this: Title: My Document Summary: A brief description of my document. Authors: Waylan Limberg Tom Christie Date: January 23, 2018 blank-value: some_url: https://example.com This is the first paragraph of the document. The keywords are case-insensitive and may consist of letters, numbers, underscores and dashes and must end with a colon. The values consist of anything following the colon on the line and may even be blank. If a line is indented by 4 or more spaces, that line is assumed to be an additional line of the value for the previous keyword. A keyword may have as many lines as desired. All lines are joined into a single string. The first blank line ends all meta-data for the document. Therefore, the first line of a document must not be blank. !!! note MkDocs does not support YAML style deliminators (`---` or `...`) for MultiMarkdown style meta-data. In fact, MkDocs relies on the the presence or absence of the deliminators to determine whether YAML style meta-data or MultiMarkdown style meta-data is being used. If the deliminators are detected, but the content between the deliminators is not valid YAML meta-data, MkDocs does not attempt to parse the content as MultiMarkdown style meta-data. Tables The tables extension adds a basic table syntax to Markdown which is popular across multiple implementations. The syntax is rather simple and is generally only useful for simple tabular data. A simple table looks like this: First Header | Second Header | Third Header ------------ | ------------- | ------------ Content Cell | Content Cell | Content Cell Content Cell | Content Cell | Content Cell If you wish, you can add a leading and tailing pipe to each line of the table: | First Header | Second Header | Third Header | | ------------ | ------------- | ------------ | | Content Cell | Content Cell | Content Cell | | Content Cell | Content Cell | Content Cell | Specify alignment for each column by adding colons to separator lines: First Header | Second Header | Third Header :----------- |:-------------:| -----------: Left | Center | Right Left | Center | Right Note that table cells cannot contain any block level elements and cannot contain multiple lines of text. They can, however, include inline Markdown as defined in Markdown's syntax rules. Additionally, a table must be surrounded by blank lines. There must be a blank line before and after the table. Fenced code blocks The fenced code blocks extension adds an alternate method of defining code blocks without indentation. The first line should contain 3 or more backtick ( ` ) characters, and the last line should contain the same number of backtick characters ( ` ): ``` Fenced code blocks are like Standard Markdown\u2019s regular code blocks, except that they\u2019re not indented and instead rely on start and end fence lines to delimit the code block. ``` With this approach, the language can optionally be specified on the first line after the backticks which informs any syntax highlighters of the language used: ```python def fn(): pass ``` Note that fenced code blocks can not be indented. Therefore, they cannot be nested inside list items, blockquotes, etc.","title":"Writing your docs"},{"location":"user-guide/writing-your-docs/#writing-your-docs","text":"How to layout and write your Markdown source files.","title":"Writing your docs"},{"location":"user-guide/writing-your-docs/#file-layout","text":"Your documentation source should be written as regular Markdown files (see Writing with Markdown below), and placed in the documentation directory . By default, this directory will be named docs and will exist at the top level of your project, alongside the mkdocs.yml configuration file. The simplest project you can create will look something like this: mkdocs.yml docs/ index.md By convention your project homepage should always be named index . Any of the following extensions may be used for your Markdown source files: markdown , mdown , mkdn , mkd , md . All Markdown files included in your documentation directory will be rendered in the built site regardless of any settings. You can also create multi-page documentation, by creating several Markdown files: mkdocs.yml docs/ index.md about.md license.md The file layout you use determines the URLs that are used for the generated pages. Given the above layout, pages would be generated for the following URLs: / /about/ /license/ You can also include your Markdown files in nested directories if that better suits your documentation layout. docs/ index.md user-guide/getting-started.md user-guide/configuration-options.md license.md Source files inside nested directories will cause pages to be generated with nested URLs, like so: / /user-guide/getting-started/ /user-guide/configuration-options/ /license/","title":"File layout"},{"location":"user-guide/writing-your-docs/#index-pages","text":"When a directory is requested, by default, most web servers will return an index file (usually named index.html ) contained within that directory if one exists. For that reason, the homepage in all of the examples above has been named index.md , which MkDocs will render to index.html when building the site. Many repository hosting sites provide special treatment for README files by displaying the contents of the README file when browsing the contents of a directory. Therefore, MkDocs will allow you to name your index pages as README.md instead of index.md . In that way, when users are browsing your source code, the repository host can display the index page of that directory as it is a README file. However, when MkDocs renders your site, the file will be renamed to index.html so that the server will serve it as a proper index file. If both an index.md file and a README.md file are found in the same directory, then the index.md file is used and the README.md file is ignored.","title":"Index pages"},{"location":"user-guide/writing-your-docs/#configure-pages-and-navigation","text":"The nav configuration setting in your mkdocs.yml file defines which pages are included in the global site navigation menu as well as the structure of that menu. If not provided, the navigation will be automatically created by discovering all the Markdown files in the documentation directory . An automatically created navigation configuration will always be sorted alphanumerically by file name (except that index files will always be listed first within a sub-section). You will need to manually define your navigation configuration if you would like your navigation menu sorted differently. A simple navigation configuration looks like this: nav: - 'index.md' - 'about.md' All paths in the navigation configuration must be relative to the docs_dir configuration option. If that option is set to the default value, docs , the source files for the above configuration would be located at docs/index.md and docs/about.md . The above example will result in two navigation items being created at the top level and with their titles inferred from the contents of the file (or the filename if no title is defined within the file). To define a custom title for the pages, the title can be added before the filename. nav: - Home: 'index.md' - About: 'about.md' Note that if a title is defined for a page in the navigation, that title will be used throughout the site for that page and will override any title defined within the page itself. Navigation sub-sections can be created by listing related pages together under a section title. For example: nav: - Home: 'index.md' - User Guide: - 'Writing your docs': 'writing-your-docs.md' - 'Styling your docs': 'styling-your-docs.md' - About: - 'License': 'license.md' - 'Release Notes': 'release-notes.md' With the above configuration we have three top level items: \"Home\", \"User Guide\" and \"About.\" \"Home\" is a link to the homepage for the site. Under the \"User Guide\" section two pages are listed: \"Writing your docs\" and \"Styling your docs.\" Under the \"About\" section two more pages are listed: \"License\" and \"Release Notes.\" Note that a section cannot have a page assigned to it. Sections are only containers for child pages and sub-sections. You may nest sections as deeply as you like. However, be careful that you don't make it too difficult for your users to navigate through the site navigation by over-complicating the nesting. While sections may mirror your directly structure, they do not have to. Any pages not listed in your navigation configuration will still be rendered and included with the built site, however, they will not be linked from the global navigation and will not be included in the previous and next links. Such pages will be \"hidden\" unless linked to directly.","title":"Configure Pages and Navigation"},{"location":"user-guide/writing-your-docs/#writing-with-markdown","text":"MkDocs pages must be authored in Markdown , a lightweight markup language which results in easy-to-read, easy-to-write plain text documents that can be converted to valid HTML documents in a predictable manner. MkDocs uses the Python-Markdown library to render Markdown documents to HTML. Python-Markdown is almost completely compliant with the reference implementation , although there are a few very minor differences . In addition to the base Markdown syntax which is common across all Markdown implementations, MkDocs includes support for extending the Markdown syntax with Python-Markdown extensions . See the MkDocs' markdown_extensions configuration setting for details on how to enable extensions. MkDocs includes some extensions by default, which are highlighted below.","title":"Writing with Markdown"},{"location":"user-guide/writing-your-docs/#internal-links","text":"MkDocs allows you to interlink your documentation by using regular Markdown links . However, there are a few additional benefits to formatting those links specifically for MkDocs as outlined below.","title":"Internal links"},{"location":"user-guide/writing-your-docs/#linking-to-pages","text":"When linking between pages in the documentation you can simply use the regular Markdown linking syntax, including the relative path to the Markdown document you wish to link to. Please see the [project license](license.md) for further details. When the MkDocs build runs, these Markdown links will automatically be transformed into an HTML hyperlink to the appropriate HTML page. If the target documentation file is in another directory you'll need to make sure to include any relative directory path in the link. Please see the [project license](../about/license.md) for further details. The toc extension is used by MkDocs to generate an ID for every header in your Markdown documents. You can use that ID to link to a section within a target document by using an anchor link. The generated HTML will correctly transform the path portion of the link, and leave the anchor portion intact. Please see the [project license](about.md#license) for further details. Note that IDs are created from the text of a header. All text is converted to lowercase and any disallowed characters, including white-space, are converted to dashes. Consecutive dashes are then reduced to a single dash. There are a few configuration settings provided by the toc extension which you can set in your mkdocs.yml configuration file to alter the default behavior: permalink : : Generate permanent links at the end of each header. Default: False . When set to True the paragraph symbol (&para; or `&para;`) is used as the link text. When set to a string, the provided string is used as the link text. For example, to use the hash symbol (`#`) instead, do: markdown_extensions: - toc: permalink: \"#\" baselevel : : Base level for headers. Default: 1 . This setting allows the header levels to be automatically adjusted to fit within the hierarchy of your HTML templates. For example, if the Markdown text for a page should not contain any headers higher than level 2 (`<h2>`), do: markdown_extensions: - toc: baselevel: 2 Then any headers in your document would be increased by 1. For example, the header `# Header` would be rendered as a level 2 header (`<h2>`) in the HTML output. separator : : Word separator. Default: - . Character which replaces white-space in generated IDs. If you prefer underscores, then do: markdown_extensions: - toc: separator: \"_\" Note that if you would like to define multiple of the above settings, you must do so under a single toc entry in the markdown_extensions configuration option. markdown_extensions: - toc: permalink: \"#\" baselevel: 2 separator: \"_\"","title":"Linking to pages"},{"location":"user-guide/writing-your-docs/#linking-to-images-and-media","text":"As well as the Markdown source files, you can also include other file types in your documentation, which will be copied across when generating your documentation site. These might include images and other media. For example, if your project documentation needed to include a GitHub pages CNAME file and a PNG formatted screenshot image then your file layout might look as follows: mkdocs.yml docs/ CNAME index.md about.md license.md img/ screenshot.png To include images in your documentation source files, simply use any of the regular Markdown image syntaxes: Cupcake indexer is a snazzy new project for indexing small cakes. ![Screenshot](img/screenshot.png) *Above: Cupcake indexer in progress* Your image will now be embedded when you build the documentation, and should also be previewed if you're working on the documentation with a Markdown editor.","title":"Linking to images and media"},{"location":"user-guide/writing-your-docs/#linking-from-raw-html","text":"Markdown allows document authors to fall back to raw HTML when the Markdown syntax does not meets the author's needs. MkDocs does not limit Markdown in this regard. However, as all raw HTML is ignored by the Markdown parser, MkDocs is not able to validate or convert links contained in raw HTML. When including internal links within raw HTML, you will need to manually format the link appropriately for the rendered document.","title":"Linking from raw HTML"},{"location":"user-guide/writing-your-docs/#meta-data","text":"MkDocs includes support for both YAML and MultiMarkdown style meta-data (often called front-matter). Meta-data consists of a series of keywords and values defined at the beginning of a Markdown document, which are stripped from the document prior to it being processing by Python-Markdown. The key/value pairs are passed by MkDocs to the page template. Therefore, if a theme includes support, the values of any keys can be displayed on the page or used to control the page rendering. See your theme's documentation for information about which keys may be supported, if any. In addition to displaying information in a template, MkDocs includes support for a few predefined meta-data keys which can alter the behavior of MkDocs for that specific page. The following keys are supported: template : : The template to use with the current page. By default, MkDocs uses the `main.html` template of a theme to render Markdown pages. You can use the `template` meta-data key to define a different template file for that specific page. The template file must be available on the path(s) defined in the theme's environment. title : : The \"title\" to use for the document. MkDocs will attempt to determine the title of a document in the following ways, in order: 1. A title defined in the [nav] configuration setting for a document. 2. A title defined in the `title` meta-data key of a document. 3. A level 1 Markdown header on the first line of the document body. 4. The filename of a document. Upon finding a title for a page, MkDoc does not continue checking any additional sources in the above list.","title":"Meta-Data"},{"location":"user-guide/writing-your-docs/#yaml-style-meta-data","text":"YAML style meta-data consists of YAML key/value pairs wrapped in YAML style deliminators to mark the start and/or end of the meta-data. The first line of a document must be --- . The meta-data ends at the first line containing an end deliminator (either --- or ... ). The content between the deliminators is parsed as YAML . --- title: My Document summary: A brief description of my document. authors: - Waylan Limberg - Tom Christie date: 2018-07-10 some_url: https://example.com --- This is the first paragraph of the document. YAML is able to detect data types. Therefore, in the above example, the values of title , summary and some_url are strings, the value of authors is a list of strings and the value of date is a datetime.date object. Note that the YAML keys are case sensitive and MkDocs expects keys to be all lowercase. The top level of the YAML must be a collection of key/value pairs, which results in a Python dict being returned. If any other type is returned or the YAML parser encounters an error, then MkDocs does not recognize the section as meta-data, the page's meta attribute will be empty, and the section is not removed from the document.","title":"YAML Style Meta-Data"},{"location":"user-guide/writing-your-docs/#multimarkdown-style-meta-data","text":"MultiMarkdown style meta-data uses a format first introduced by the MultiMarkdown project. The data consists of a series of keywords and values defined at the beginning of a Markdown document, like this: Title: My Document Summary: A brief description of my document. Authors: Waylan Limberg Tom Christie Date: January 23, 2018 blank-value: some_url: https://example.com This is the first paragraph of the document. The keywords are case-insensitive and may consist of letters, numbers, underscores and dashes and must end with a colon. The values consist of anything following the colon on the line and may even be blank. If a line is indented by 4 or more spaces, that line is assumed to be an additional line of the value for the previous keyword. A keyword may have as many lines as desired. All lines are joined into a single string. The first blank line ends all meta-data for the document. Therefore, the first line of a document must not be blank. !!! note MkDocs does not support YAML style deliminators (`---` or `...`) for MultiMarkdown style meta-data. In fact, MkDocs relies on the the presence or absence of the deliminators to determine whether YAML style meta-data or MultiMarkdown style meta-data is being used. If the deliminators are detected, but the content between the deliminators is not valid YAML meta-data, MkDocs does not attempt to parse the content as MultiMarkdown style meta-data.","title":"MultiMarkdown Style Meta-Data"},{"location":"user-guide/writing-your-docs/#tables","text":"The tables extension adds a basic table syntax to Markdown which is popular across multiple implementations. The syntax is rather simple and is generally only useful for simple tabular data. A simple table looks like this: First Header | Second Header | Third Header ------------ | ------------- | ------------ Content Cell | Content Cell | Content Cell Content Cell | Content Cell | Content Cell If you wish, you can add a leading and tailing pipe to each line of the table: | First Header | Second Header | Third Header | | ------------ | ------------- | ------------ | | Content Cell | Content Cell | Content Cell | | Content Cell | Content Cell | Content Cell | Specify alignment for each column by adding colons to separator lines: First Header | Second Header | Third Header :----------- |:-------------:| -----------: Left | Center | Right Left | Center | Right Note that table cells cannot contain any block level elements and cannot contain multiple lines of text. They can, however, include inline Markdown as defined in Markdown's syntax rules. Additionally, a table must be surrounded by blank lines. There must be a blank line before and after the table.","title":"Tables"},{"location":"user-guide/writing-your-docs/#fenced-code-blocks","text":"The fenced code blocks extension adds an alternate method of defining code blocks without indentation. The first line should contain 3 or more backtick ( ` ) characters, and the last line should contain the same number of backtick characters ( ` ): ``` Fenced code blocks are like Standard Markdown\u2019s regular code blocks, except that they\u2019re not indented and instead rely on start and end fence lines to delimit the code block. ``` With this approach, the language can optionally be specified on the first line after the backticks which informs any syntax highlighters of the language used: ```python def fn(): pass ``` Note that fenced code blocks can not be indented. Therefore, they cannot be nested inside list items, blockquotes, etc.","title":"Fenced code blocks"}]}